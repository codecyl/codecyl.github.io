<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Est的小窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.codeest.moe/"/>
  <updated>2017-03-30T18:10:05.000Z</updated>
  <id>blog.codeest.moe/</id>
  
  <author>
    <name>Est</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>画个技能树</title>
    <link href="blog.codeest.moe/2017/03/29/life-skill-tree/"/>
    <id>blog.codeest.moe/2017/03/29/life-skill-tree/</id>
    <published>2017-03-29T15:32:49.000Z</published>
    <updated>2017-03-30T18:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般来说，学习一项技能根据掌握程度大致可以分为三个阶段：了解、熟练、精通，更具体一些来说的话，</p>
<ul>
<li>了解 —— 即<code>知道有</code>，处于知道有这么个API，有这么个开源项目，有这种分析方法、解决思路，有这种相关技术、类似问题等等，但实际使用时还需要再去查询的这种阶段。这个阶段可能会被很多人忽略，但是有时多一些了解，让视野变宽广，也就多了一些遇到难题时可选方案，即使只是一些朦胧的印象，偶尔也可以帮你少走弯路。所以平时广泛涉猎一些文章，浏览各类目录，关注新技术与知识，即使没办法立刻记住，也许哪天灵光一闪就能雪中送炭。</li>
<li>熟练 —— 即<code>熟练用</code>，这个阶段其实可以分为两部分，先充分学习，再亲手实践，最后达到熟练使用某个技能的效果。这是一个相对主力的阶段，能满足我们日常生活所需，同时也需要花费大量时间去积累，我们大部分的技能可能都是停留在这个阶段。</li>
<li>精通 —— 即<code>懂原理</code>，对于一些重要的，或是有特殊需求的技能，我们还必须懂其原理才可以，原因很简单，懂原理是<b>解决难题</b>时最有效的手段，也是<b>创造该知识的衍生物</b>时的必经之路。比如读了一些FrameWork层的源码，才能在一些复杂场景的debug中游刃有余，了解Dex、ClassLoader相关原理，才能写出热更新与插件化的框架，熟悉RxJava的源码，才能写出RxXXX系列的衍生框架，深入理解JVM，才能做出更深层次的性能优化，所以挑选一些知识或技能去掌握原理是必不可少的。</li>
</ul>
<p>下面列出一些自己目前已经掌握的和计划掌握的技能，给自己画一个技能树，理清楚哪些是我现在能做到的，还有哪些事等着我去做，当然精力是有限的，我也不敢保证挖的坑都能填上，只能尽力而为=￣ω￣= 每个条目都是链接，有些是开源项目地址，有些是自己收集的学习资料，或许可以帮到你</p>
<h1 id="技术Skill"><a href="#技术Skill" class="headerlink" title="技术Skill"></a>技术Skill</h1><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android" target="_blank" rel="external">FrameWork</a></li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a> &amp; <a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a></li>
<li><a href="https://github.com/realm/realm-java" target="_blank" rel="external">Realm</a> &amp; <a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">GreenDAO</a></li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a> &amp; <a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a> &amp; <a href="https://github.com/google/volley" target="_blank" rel="external">Volley</a></li>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a> &amp; <a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a></li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a> &amp; <a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a></li>
<li><a href="http://kotlindoc.com/index.html" target="_blank" rel="external">Kotlin</a> &amp; <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding" target="_blank" rel="external">DataBinding</a></li>
</ul>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li><a href="http://www.w3school.com.cn/html5/index.asp" target="_blank" rel="external">HTML5</a> &amp; <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started" target="_blank" rel="external">CSS3</a> &amp; <a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">ES6</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React.js</a> &amp; <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">Vue.js</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux</a> &amp; <a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">Webpack</a> &amp; <a href="http://reactnative.cn/docs/0.42/tutorial.html#content" target="_blank" rel="external">React Native</a></li>
<li><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="external">TypeScript</a> &amp; <a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="external">SASS</a></li>
<li><a href="http://materializecss.com/getting-started.html" target="_blank" rel="external">Materialize</a> &amp; <a href="https://github.com/callemall/material-ui" target="_blank" rel="external">material-ui</a></li>
</ul>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501579966ab03decb0dd246e1a6799dd653a15e1b000" target="_blank" rel="external">Koa2</a></li>
<li><a href="http://docs.mongoing.com/manual-zh/core/document.html" target="_blank" rel="external">MongoDB</a></li>
</ul>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python</a></li>
<li><a href="http://billie66.github.io/TLCL/book/zh/" target="_blank" rel="external">Shell</a></li>
</ul>
<h1 id="生活Skill"><a href="#生活Skill" class="headerlink" title="生活Skill"></a>生活Skill</h1><ul>
<li>摄影 ：单反 X1（这算是逛漫展的衍生技能么…</li>
<li>绘画 ：数位板 X1，Pixiv账号 X1 （小学时在课外学过一段时间绘画，估计那时的我都比现在的我画得好，逃~</li>
<li>PS与视频剪辑 ：Bilibili账号 X1（有些时候真的能用上呢</li>
<li>做饭 ：锅 X1（不是煮泡面和下速冻水饺的那种= =</li>
<li>音乐 ：乐器 X1（目前还处于只能玩音游的状态，嘛…</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>一天只有24小时其实根本不够用，不是么</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘛…应该说是技能树+计划表，列出自己已经掌握的和计划掌握的技能，不仅限于技术，以后有了新目标也会补在这里&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="blog.codeest.moe/categories/Life/"/>
    
    
      <category term="life" scheme="blog.codeest.moe/tags/life/"/>
    
      <category term="skill" scheme="blog.codeest.moe/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>操作符速查索引</title>
    <link href="blog.codeest.moe/2017/02/28/android-operator/"/>
    <id>blog.codeest.moe/2017/02/28/android-operator/</id>
    <published>2017-02-28T15:52:20.000Z</published>
    <updated>2017-03-04T17:59:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了方便自己查询，也为了重温一些常用的操作符，在这里列个索引，包括RxJava操作符，Java8 Stream API，Kotlin高阶函数，总体看来三者在设计上有很多相似之处<br>因为仅仅是索引，为了简洁直观、方便查询不会去具体分析每个操作符的用法，如果想了解具体用法可以去看文末的参考文章</p>
<h1 id="RxJava篇"><a href="#RxJava篇" class="headerlink" title="RxJava篇"></a>RxJava篇</h1><h3 id="0-创建型操作符"><a href="#0-创建型操作符" class="headerlink" title="0.创建型操作符"></a>0.创建型操作符</h3><ul>
<li><p>create(onSubscribe)<br>通过<code>OnSubscribe</code>对象创建<code>Observable</code></p>
</li>
<li><p>just(T)<br>依次发射传入的参数</p>
</li>
<li><p>from(Array/Iterator)<br>拆解数组/容器中的元素并依次发射</p>
</li>
<li><p>defer(Func0)<br>配合创建操作符，做到订阅后才会开始创建</p>
</li>
<li><p>repeat(int)<br>配合创建操作符，重复数次创建发射的数据</p>
</li>
<li><p>range(int, int)<br>依次发射一个数字区间的数字</p>
</li>
<li><p>interval(int, int, Unit)<br>轮询发射，参数依次为起始延迟时间，轮询时间间隔，时间单位</p>
</li>
<li><p>timer(int, Unit)<br>延迟发射，参数为延迟时间，时间单位</p>
</li>
</ul>
<h3 id="1-转换操作符"><a href="#1-转换操作符" class="headerlink" title="1.转换操作符"></a>1.转换操作符</h3><ul>
<li><p>map(Func1)<br>类型转化A -&gt; B</p>
</li>
<li><p>flapMap(Func1)<br>类型转化，返回<code>Observable&lt;T&gt;</code>，A -&gt; Observable<b></b></p>
</li>
<li><p>concatMap(Func1)<br>flapMap返回的结果是不能保证和传入顺序一致的，可能会交叉，concapMap则是依序的</p>
</li>
<li><p>flatMapIterable(Func1)<br>与flapMap类似，要求返回<code>Iterable&lt;T&gt;</code>，并将该集合依次发射</p>
</li>
<li><p>switchMap(Func1)<br>与flapMap类似，当数据源发出新数据时，会停止发射上一个数据源转化产生的Observable，开始处理当前需要转化的数据</p>
</li>
<li><p>scan(Func2)<br>类型转化，将当前两个数据源A与B转化后的结果作为下一次转化的A数据，与新数据B继续转化</p>
</li>
<li><p>groupBy(Func1)<br>基于一个Key，将数据源中Key相同的数据划分到同一组，产生多个组，并将每组的数据依次发射</p>
</li>
<li><p>buffer(int)<br>收集结果，每集齐n个发射一次集合</p>
</li>
<li><p>buffer(int, Unit)<br>收集结果，每集齐一段时间发射一次集合</p>
</li>
<li><p>window(int, Unit)<br>同Buffer类似，但返回的是<code>Observable</code>包裹的集合</p>
</li>
<li><p>cast(Class)<br>将每个数据都强转成该class类型再发射</p>
</li>
</ul>
<h3 id="2-过滤操作符"><a href="#2-过滤操作符" class="headerlink" title="2.过滤操作符"></a>2.过滤操作符</h3><ul>
<li><p>filter(Func1)<br>过滤表达式结果为false的数据</p>
</li>
<li><p>take(int)<br>发射前n项</p>
</li>
<li><p>takeLast(int)<br>发射后n项</p>
</li>
<li><p>takeUntil(Func1)<br>发射，直到表达式结果为true停止发射</p>
</li>
<li><p>takeUntil(Observable)<br>发射，直到参数中的<code>Observable</code>开始发射时停止发射</p>
</li>
<li><p>skip(int)<br>跳过前n项</p>
</li>
<li><p>skipLast(int)<br>跳过后n项</p>
</li>
<li><p>elementAt(int)<br>发射第n项</p>
</li>
<li><p>debounce(long, Unit)<br>如果在指定的时间间隔中没有发射一个数据，那么它将发射最后的那个（即一个数据在下一个数据到来前停留了足够的间隔才会发射，常用于点击间隔，搜索间隔等）</p>
</li>
<li><p>sample(long, Unit)<br>发射每个时间间隔中最近的一个元素</p>
</li>
<li><p>throttleFirst(long, Unit)<br>发射每个时间间隔中第一个元素</p>
</li>
<li><p>timeout(long, Unit)<br>指定时间间隔没发射值则产生onError</p>
</li>
<li><p>distinct()<br>过滤重复的数据</p>
</li>
<li><p>distinctUntilChanged()<br>只判断和前一项是否重复，重复则过滤</p>
</li>
<li><p>first()<br>只发射第一项</p>
</li>
<li><p>first(Func1）<br>发射第一个满足条件的项</p>
</li>
<li><p>last()<br>只发射最后一项</p>
</li>
<li><p>last(Func1)<br>只发射最后一个满足条件的项</p>
</li>
</ul>
<h3 id="3-组合操作符"><a href="#3-组合操作符" class="headerlink" title="3.组合操作符"></a>3.组合操作符</h3><ul>
<li><p>merge(Observable, Observable)<br>合并两个<code>Observable</code>中的数据并依次发射，合并后是无序的</p>
</li>
<li><p>merge(Observable[])<br>同上</p>
</li>
<li><p>concat(Observable&lt;? extends T&gt;, Observable&lt;? extends T&gt;)<br>先发射前者的数据，再发射后者的数据，相比merge有序了</p>
</li>
<li><p>startWith(T)<br>在源数据前插入一组数据</p>
</li>
<li><p>startWith(Observable<t>)<br>同上，发射时先发射参数Observable中的数据，即也是插入数据到前面</t></p>
</li>
<li><p>zip(Observable, Observable, Func2)<br>合并两个<code>Observable</code>中的数据，每次从两者中各取一个数据根据Func2规则做转化后发射，其中一个Observable发射结束或出现异常则结束</p>
</li>
<li><p>combineLatest(Observable, Observable, Func2)<br>合并两个<code>Observable</code>中的数据，在每一个新数据发射时都取另一个Observable中最近一次发射数据根据Func2规则做转化后发射</p>
</li>
<li><p>join(Observable, Func1, Func1, Func2)<br>类似zip和combineLatest，将源数据与参数中的<code>Observable</code>结合后根据Func2作转换后发射，不过第一个Func1决定了源数据的声明有效期，第二个Func1则决定了参数<code>Observable</code>数据的声明有效期，每个新数据发射后都会与另一个<code>Observable</code>中尚在声明有效期内的所有数据都产生结合</p>
</li>
</ul>
<h3 id="附录-Scheduler种类"><a href="#附录-Scheduler种类" class="headerlink" title="附录 Scheduler种类"></a>附录 Scheduler种类</h3><table>
<thead>
<tr>
<th>种类</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Schedulers.computation()</td>
<td>用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量，它是buffer() , debounce() , delay() , interval() , sample() , skip()方法默认的调度器</td>
</tr>
<tr>
<td>Schedulers.from(executor)</td>
<td>使用指定的Executor作为调度器</td>
</tr>
<tr>
<td>Schedulers.immediate()</td>
<td>在当前线程立即开始执行任务，它是 timeout() , timeInterval() ,以及 timestamp() 方法默认的调度器</td>
</tr>
<tr>
<td>Schedulers.io()</td>
<td>用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io()默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器</td>
</tr>
<tr>
<td>Schedulers.newThread()</td>
<td>为每个任务创建一个新线程</td>
</tr>
<tr>
<td>Schedulers.trampoline()</td>
<td>当其它排队的任务完成后，在当前线程排队开始执行，它是 repeat() 和 retry() 方法默认的调度器</td>
</tr>
<tr>
<td>AndroidSchedulers.mainThread()</td>
<td>RxAndroid中的类型，表示Android主线程</td>
</tr>
</tbody>
</table>
<h3 id="附录-Subject种类"><a href="#附录-Subject种类" class="headerlink" title="附录 Subject种类"></a>附录 Subject种类</h3><table>
<thead>
<tr>
<th>种类</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>PublishSubject</td>
<td>常规情况，在订阅后开始发送数据</td>
</tr>
<tr>
<td>BehaviorSubject</td>
<td>在订阅者订阅时，会先发送一个其最近发送的数据（如果此时还没有收到任何数据，它会发送一个默认值），然后正常发送订阅后的数据</td>
</tr>
<tr>
<td>ReplaySubject</td>
<td>在订阅时，会发送所有的数据给订阅者，即使是订阅前已经发射的数据</td>
</tr>
<tr>
<td>AsyncSubject</td>
<td>只会在Observable发射完结后，将发出的最后一个数据发给订阅者</td>
</tr>
</tbody>
</table>
<h1 id="Java8-stream-API篇"><a href="#Java8-stream-API篇" class="headerlink" title="Java8 stream API篇"></a>Java8 stream API篇</h1><h3 id="create型"><a href="#create型" class="headerlink" title="create型"></a>create型</h3><p>Stream的一系列静态工厂方法</p>
<ul>
<li>of(T t)</li>
<li><p>of(T… values)<br>返回含有一个或多个T元素的stream</p>
</li>
<li><p>generate(Supplier<t> s)<br>返回一个无限长度的stream，通常要配合过滤或终结操作符使之变为有限长度的</t></p>
</li>
<li><p>iterate(T seed, UnaryOperator<t> f)<br>返回seed，f(seed)，f(f(seed)) … 类型的无限长度的stream</t></p>
</li>
<li><p>empty()<br>返回空的stream</p>
</li>
</ul>
<h3 id="Intermediate型"><a href="#Intermediate型" class="headerlink" title="Intermediate型"></a>Intermediate型</h3><p>Intermediate型的方法返回结果为stream类型，可以像链式一样多次调用</p>
<ul>
<li><p>concat(Stream, Stream)<br>按先后有序拼接两个stream中的数据</p>
</li>
<li><p>distinct()<br>剔除重复元素</p>
</li>
<li><p>filter(Predicate)<br>过滤不满足条件的元素</p>
</li>
<li><p>map(Func)<br>转换元素</p>
</li>
<li><p>flatMap(Func)<br>转换元素，要求返回一个stream类型</p>
</li>
<li><p>peek(Consumer）<br>创建一个包含原Stream的所有元素的新Stream，对其中的每个元素执行一次Consumer处理，原流不变，直接返回</p>
</li>
<li><p>skip(long)<br>跳过前n个元素，从n+1起返回一个新流</p>
</li>
<li><p>sorted()</p>
</li>
<li>sorted(Comparator)<br>按规则对流排序</li>
</ul>
<h3 id="Terminal型"><a href="#Terminal型" class="headerlink" title="Terminal型"></a>Terminal型</h3><p>Terminal型的方法返回结果为void或非stream类型，在数据流中只能使用一次</p>
<ul>
<li><p>count()<br>返回流中元素的个数</p>
</li>
<li><p>forEach(Consumer)<br>遍历元素，对每个元素执行一次Consumer处理</p>
</li>
<li><p>forEachOrdered(Consumer)<br>保证依照原顺序遍历元素，对每个元素执行一次Consumer处理，并行流中forEach可能会乱序</p>
</li>
<li><p>max(Comparator)<br>返回最大值</p>
</li>
<li><p>min(Comparator)<br>返回最小值</p>
</li>
<li><p>reduce(BinaryOperator)</p>
</li>
<li>reduce(T, BinaryOperator)</li>
<li><p>reduce(U, BiFunction, BinaryOperator)<br>有三个重载方法，类似RxJava中的scan，将两个元素的操作结果作为下一次操作的元素之一，与新元素再次操作，返回最终结果 <a href="http://blog.csdn.net/IO_Field/article/details/54971679" target="_blank" rel="external">具体参考</a></p>
</li>
<li><p>collect(Supplier, BiConsumer, BiConsumer)</p>
</li>
<li>collect(Collector)<br>有两个重载方法，非常强大的操作符，可以将流转化成各种数据结构类型返回 <a href="http://blog.csdn.net/io_field/article/details/54971608" target="_blank" rel="external">具体参考</a></li>
</ul>
<h3 id="Short-circuiting型"><a href="#Short-circuiting型" class="headerlink" title="Short-circuiting型"></a>Short-circuiting型</h3><p>Short-circuiting型的方法可以有效的处理无限元素的stream</p>
<ul>
<li><p>limit(long)<br>返回前n个元素组成的新流</p>
</li>
<li><p>allMatch()<br>顾名思义，所有元素满足条件才会返回true，否则返回false</p>
</li>
<li><p>anyMatch()<br>有元素满足条件就会返回true，否则返回false</p>
</li>
<li><p>noneMatch()<br>所有元素都不满足条件则返回true，否则返回false</p>
</li>
<li><p>findAny()<br>返回随机一个元素的<code>Optional</code></p>
</li>
<li><p>findFirst()<br>返回第一个元素的<code>Optional</code></p>
</li>
</ul>
<h1 id="Kotlin高阶函数篇"><a href="#Kotlin高阶函数篇" class="headerlink" title="Kotlin高阶函数篇"></a>Kotlin高阶函数篇</h1><h3 id="0-集合操作符"><a href="#0-集合操作符" class="headerlink" title="0.集合操作符"></a>0.集合操作符</h3><p>非常非常丰富，和上面的<code>rxjava</code>, <code>stream</code>操作符有很多类似之处，一共有6类：</p>
<ul>
<li>总数操作符</li>
<li>过滤操作符</li>
<li>映射操作符</li>
<li>顺序操作符</li>
<li>生产操作符</li>
<li>元素操作符</li>
</ul>
<p>已经有文章例举的很全面了，<a href="http://blog.csdn.net/coder_pig/article/details/53164424" target="_blank" rel="external">具体参考戳这里</a></p>
<h3 id="1-apply-with"><a href="#1-apply-with" class="headerlink" title="1.apply/with"></a>1.apply/with</h3><p>通过上下文帮助我们调用方法，而且由于上下文是依赖注入的，还可以灵活切换<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">textView.apply &#123;</div><div class="line">	scale = <span class="number">2</span>f </div><div class="line">   rotationX = <span class="number">10</span>f</div><div class="line">&#125;</div><div class="line"><span class="comment">//等同于</span></div><div class="line">with(textView) &#123;</div><div class="line">	scale = <span class="number">2</span>f </div><div class="line">   rotationX = <span class="number">10</span>f</div><div class="line">&#125;</div><div class="line"><span class="comment">//等同于</span></div><div class="line">textView.scale = <span class="number">2</span>f</div><div class="line">textView.rotationX = <span class="number">10</span>f</div></pre></td></tr></table></figure></p>
<h3 id="2-let"><a href="#2-let" class="headerlink" title="2.let"></a>2.let</h3><p>let中传入的lambda调用的参数就是它自己，是一个灵活的操作符，可以封装一些操作，可以有返回值<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">textView?.let&#123; </div><div class="line">    it.scale = <span class="number">2</span>f</div><div class="line">    it.rotationX = <span class="number">10</span>f</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-run"><a href="#3-run" class="headerlink" title="3.run"></a>3.run</h3><p>执行一个代码块，类似于执行了一个匿名函数，可以有返回值<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run &#123; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-repeat"><a href="#4-repeat" class="headerlink" title="4.repeat"></a>4.repeat</h3><p>将代码块重复执行数次，lambda传入的参数（it）是索引<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repeat(<span class="number">3</span>) &#123;</div><div class="line">	print(<span class="string">"index:<span class="subst">$it</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-to"><a href="#5-to" class="headerlink" title="5.to"></a>5.to</h3><p>产生Pair类型的对象<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> map = mapOf(<span class="number">1</span> to <span class="string">"x"</span>, <span class="number">2</span> to <span class="string">"y"</span>, <span class="number">-1</span> to <span class="string">"zz"</span>)</div><div class="line">println(map) <span class="comment">// &#123;1=x, 2=y, -1=zz&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="6-lazy"><a href="#6-lazy" class="headerlink" title="6.lazy"></a>6.lazy</h3><p>起到延迟加载的效果，在第一次调用时才加载<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> : <span class="type">Activity</span></span>()&#123;</div><div class="line"></div><div class="line">        <span class="keyword">val</span> mTextView: TextView <span class="keyword">by</span> lazy&#123;</div><div class="line">        	findViewById(R.id.tv_test) <span class="keyword">as</span> TextView</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>&#123;</div><div class="line">        	<span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        	setContentView(R.layout.activity_main)</div><div class="line">        	mTextView = <span class="string">"Test"</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多高阶函数可以<a href="http://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html#functions" target="_blank" rel="external">参考官网</a></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/20687307" target="_blank" rel="external">RxJava系列2(基本概念及使用介绍)</a><br><a href="http://blog.csdn.net/io_field/article/details/54971761" target="_blank" rel="external">Java 8系列之Stream的基本语法详解</a><br><a href="http://www.jianshu.com/p/03db2203e0f2" target="_blank" rel="external">Kotlin一些高阶函数的使用</a></p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxJava操作符，Java8 Stream API，Kotlin高阶函数，已经记不完了…（摔！列个大纲方便cmd/ctrl + F&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="blog.codeest.moe/categories/Android/"/>
    
    
      <category term="android" scheme="blog.codeest.moe/tags/android/"/>
    
      <category term="rxjava" scheme="blog.codeest.moe/tags/rxjava/"/>
    
      <category term="kotlin" scheme="blog.codeest.moe/tags/kotlin/"/>
    
      <category term="java8" scheme="blog.codeest.moe/tags/java8/"/>
    
      <category term="stream" scheme="blog.codeest.moe/tags/stream/"/>
    
      <category term="operator" scheme="blog.codeest.moe/tags/operator/"/>
    
  </entry>
  
  <entry>
    <title>聊聊GeekNews架构：MVP + RRD</title>
    <link href="blog.codeest.moe/2017/02/26/android-geeknews/"/>
    <id>blog.codeest.moe/2017/02/26/android-geeknews/</id>
    <published>2017-02-25T16:24:53.000Z</published>
    <updated>2017-03-04T17:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MVP是Android端的一种架构模式，RRD = Rxjava + Retrofit + Dagger2这套全家桶，<a href="https://github.com/codeestX/GeekNews" target="_blank" rel="external">GeekNews</a>就是基于以上框架搭建的阅读APP，阅读内容主要面向程序员 &amp; 极客，目前包括：</p>
<ul>
<li>知乎日报  —  汇集知乎上的热门话题与新鲜事，板块众多</li>
<li>微信精选  —  汇集微信上的海量精选新闻资讯，支持搜索</li>
<li>干货集中营  —  或许是国内第三方客户端最多的干货分享地，内含福利</li>
<li>稀土掘金  —  目前最火热的技术分发平台</li>
<li>V2EX  —  一个关于分享和探索的地方，创意工作者们的社区</li>
</ul>
<p>下面分享一些搭建这个项目时的心得体会：</p>
<h1 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h1><p><img src="http://odck16ake.bkt.clouddn.com/android_geeknews_0.png" alt=""></p>
<ul>
<li>app —— <code>Application</code>对象与全局常量</li>
<li>base —— <code>Activity</code>，<code>Fragment</code>，<code>Presenter</code>的基类</li>
<li>component —— 基础组件，如更新检测<code>Service</code>，异步初始化<code>Service</code>，图片加载封装，错误处理封装，缓存器，<code>RxBus</code>等</li>
<li>di —— 基于<code>Dagger2</code>的依赖注入</li>
<li>model —— 对应MVP的<code>model</code>层，存放网络，数据库相关的类，以及实体类<code>bean</code></li>
<li>presenter —— 对应MVP的<code>presenter</code>层，存放<code>Presenter</code>的具体实现以及契约类<code>Contract</code></li>
<li>ui —— 对应MVP的<code>view</code>层，存放具体的<code>Activity</code>，<code>Presenter</code>，<code>Adapter</code></li>
<li>util —— 工具类</li>
<li>widget —— 自定义控件或组件</li>
</ul>
<h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p>在传统的MVC（model-view-controller）模式中，Activity既承担了View的作用，又承担了大部分Controller的工作，一些业务复杂的Activity动辄就是数千行代码，大量的逻辑与视图操作分散在其中，耦合严重，非常不利于后期的扩展以及重构，在这种环境下，诞生了更适合Android开发场景的MVP（model-view-presenter）模式</p>
<p>先说下MVP的核心思路：View与Model不直接交互，Presenter充当两者的桥梁，专注逻辑的处理，所有的UI操作均抽象为view层的接口，所有的交互操作均抽象为presenter层的接口，model层的职责不变，负责提供网络、内存、本地磁盘中的数据</p>
<p>MVP模式的好处：</p>
<ul>
<li><code>Contract</code>契约类中定义了V层与P层的接口，所有功能一目了然，也能方便快速定位</li>
<li>Presenter与View均面向接口编程，可以随时替换具体实现，方便单元测试或业务变更</li>
<li><code>Activity</code>与<code>Fragment</code>充分减压，代码量分摊到了<code>Presenter</code>中，方便阅读、debug、扩展功能</li>
<li>独立出的<code>Presenter</code>层正好可以和<code>RxJava</code>配合，使用操作符高效处理各种逻辑，还可以把Presenter的生命周期同一系列<code>Observable</code>订阅绑定，防止内存泄漏</li>
<li>View层变的更加纯净、被动，只负责响应视图变化，响应生命周期，更符合前端目前火热的响应式的理念</li>
</ul>
<p>上面都是我在使用MVP模式时的一些体会，下面开始聊聊MVP在GeekNews中的应用，这里参考了Google官方的<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">android-architecture</a>项目，用契约类<code>Contract</code>来统一管理P层与V层的接口，也参考了开源项目<a href="https://github.com/zj-wukewei/Hot" target="_blank" rel="external">Hot</a>的做法，把泛型进一步融入到了MVP中</p>
<p>首先定义View层的基类<code>BaseView</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">(String msg)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useNightMode</span><span class="params">(<span class="keyword">boolean</span> isNight)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义了两个接口方法<code>showError</code>，<code>useNightMode</code>，意味着所有的视图层都要求具有提示错误信息与切换夜间模式的能力  </p>
<p>接着定义Presenter层的基类<code>BasePresenter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义了两个接口方法<code>attachView</code>，<code>detactView</code>，V层与P层是互相持有彼此的引用的，Presenter在View创建后与之绑定，在View销毁时解绑，这里也算定义了Presenter的生命周期  </p>
<p>接下来为了让Presenter更好的配合<code>RxJava</code>，使订阅时间的生命周期同Presenter绑定，防止内存泄漏，进一步封装出了<code>RxPresenter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxPresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt; <span class="keyword">implements</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> T mView;</div><div class="line">    <span class="keyword">protected</span> CompositeSubscription mCompositeSubscription;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unSubscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription != <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeSubscription.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSubscrebe</span><span class="params">(Subscription subscription)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription == <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeSubscription = <span class="keyword">new</span> CompositeSubscription();</div><div class="line">        &#125;</div><div class="line">        mCompositeSubscription.add(subscription);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> &lt;U&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRxBusSubscribe</span><span class="params">(Class&lt;U&gt; eventType, Action1&lt;U&gt; act)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription == <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeSubscription = <span class="keyword">new</span> CompositeSubscription();</div><div class="line">        &#125;</div><div class="line">        mCompositeSubscription.add(RxBus.getDefault().toDefaultObservable(eventType, act));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView = view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView = <span class="keyword">null</span>;</div><div class="line">        unSubscribe();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>CompositeSubscription</code>来收集所有订阅事件，在解绑时统一取消订阅</p>
<p>接着定义<code>Activity</code>与<code>Fragment</code>的基类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">protected</span> T mPresenter;</div><div class="line">    <span class="keyword">protected</span> Activity mContext;</div><div class="line">    <span class="keyword">private</span> Unbinder mUnBinder;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(getLayout());</div><div class="line">        mUnBinder = ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line">        initInject();</div><div class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>)</div><div class="line">            mPresenter.attachView(<span class="keyword">this</span>);</div><div class="line">        App.getInstance().addActivity(<span class="keyword">this</span>);</div><div class="line">        initEventAndData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setToolBar</span><span class="params">(Toolbar toolbar, String title)</span> </span>&#123;</div><div class="line">        toolbar.setTitle(title);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        getSupportActionBar().setDisplayShowHomeEnabled(<span class="keyword">true</span>);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                onBackPressedSupport();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> ActivityComponent <span class="title">getActivityComponent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  DaggerActivityComponent.builder()</div><div class="line">                .appComponent(App.getAppComponent())</div><div class="line">                .activityModule(getActivityModule())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> ActivityModule <span class="title">getActivityModule</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActivityModule(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>)</div><div class="line">            mPresenter.detachView();</div><div class="line">        mUnBinder.unbind();</div><div class="line">        App.getInstance().removeActivity(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useNightMode</span><span class="params">(<span class="keyword">boolean</span> isNight)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isNight) &#123;</div><div class="line">            AppCompatDelegate.setDefaultNightMode(</div><div class="line">                    AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            AppCompatDelegate.setDefaultNightMode(</div><div class="line">                    AppCompatDelegate.MODE_NIGHT_NO);</div><div class="line">        &#125;</div><div class="line">        recreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLayout</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initEventAndData</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了规范引入了Presenter泛型，强制要求所有Activity，Fragment都要定义与之对应的Presenter，并在基类中同步了两者的生命周期，除此之外还做了Presenter注入，ButterKnife，Toolbar初始化等一系列工作<br>但是在我们的应用中也存在一些偏静态的页面，它们不与数据层交互，只用作展示页面，总不能强制它们去定义空实现的Presenter吧，所以这里还定义了不带泛型的<code>SimpleActivity</code>，<code>SimpleFragment</code>用于无数据交互页面的基类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleActivity</span> <span class="keyword">extends</span> <span class="title">SupportActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Activity mContext;</div><div class="line">    <span class="keyword">private</span> Unbinder mUnBinder;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(getLayout());</div><div class="line">        mUnBinder = ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        mContext = <span class="keyword">this</span>;</div><div class="line">        App.getInstance().addActivity(<span class="keyword">this</span>);</div><div class="line">        initEventAndData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setToolBar</span><span class="params">(Toolbar toolbar, String title)</span> </span>&#123;</div><div class="line">        toolbar.setTitle(title);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        getSupportActionBar().setDisplayShowHomeEnabled(<span class="keyword">true</span>);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                onBackPressedSupport();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        App.getInstance().removeActivity(<span class="keyword">this</span>);</div><div class="line">        mUnBinder.unbind();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLayout</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initEventAndData</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，所有基类都定义好了，在实际使用时只要定义好<code>Contract</code>类中的接口，让View层继承<code>BaseActivity</code>并实现<code>Contract.View</code>接口，让Present层继承<code>RxPresenter</code>并实现<code>Contract.Presentr</code>接口即可，下面以主界面为例：<br>定义<code>Contract</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showUpdateDialog</span><span class="params">(String versionContent)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startDownloadService</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span>  <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">View</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">checkVersion</span><span class="params">(String currentVersion)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">checkPermissions</span><span class="params">(RxPermissions rxPermissions)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现View层<code>MainActivity</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">MainPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">View</span></span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">//省略代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span> </span>&#123;</div><div class="line">        getActivityComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.activity_main;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//省略代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initEventAndData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//省略代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="comment">//省略代码    </span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUpdateDialog</span><span class="params">(String versionContent)</span> </span>&#123;</div><div class="line">        <span class="comment">//省略代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownloadService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//省略代码</span></div><div class="line">    &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>实现Presenter层<code>MainPresenter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxPresenter</span>&lt;<span class="title">MainContract</span>.<span class="title">View</span>&gt; <span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">Presenter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RetrofitHelper mRetrofitHelper;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(RetrofitHelper mRetrofitHelper)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mRetrofitHelper = mRetrofitHelper;</div><div class="line">        registerEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        Subscription rxSubscription = RxBus.getDefault().toObservable(NightModeEvent.class)</div><div class="line">                .compose(RxUtil.&lt;NightModeEvent&gt;rxSchedulerHelper())</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;NightModeEvent, Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(NightModeEvent nightModeEvent)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> nightModeEvent.getNightMode();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> CommonSubscriber&lt;Boolean&gt;(mView, <span class="string">"切换模式失败ヽ(≧Д≦)ノ"</span>) &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</div><div class="line">                        mView.useNightMode(aBoolean);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        addSubscrebe(rxSubscription);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkVersion</span><span class="params">(<span class="keyword">final</span> String currentVersion)</span> </span>&#123;</div><div class="line">        Subscription rxSubscription = mRetrofitHelper.fetchVersionInfo()</div><div class="line">                .compose(RxUtil.&lt;MyHttpResponse&lt;VersionBean&gt;&gt;rxSchedulerHelper())</div><div class="line">                .compose(RxUtil.&lt;VersionBean&gt;handleMyResult())</div><div class="line">                .filter(<span class="keyword">new</span> Func1&lt;VersionBean, Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(VersionBean versionBean)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> Integer.valueOf(currentVersion.replace(<span class="string">"."</span>, <span class="string">""</span>)) &lt; Integer.valueOf(versionBean.getCode().replace(<span class="string">"."</span>, <span class="string">""</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;VersionBean, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(VersionBean bean)</span> </span>&#123;</div><div class="line">                        StringBuilder content = <span class="keyword">new</span> StringBuilder(<span class="string">"版本号: v"</span>);</div><div class="line">                        content.append(bean.getCode());</div><div class="line">                        content.append(<span class="string">"\r\n"</span>);</div><div class="line">                        content.append(<span class="string">"版本大小: "</span>);</div><div class="line">                        content.append(bean.getSize());</div><div class="line">                        content.append(<span class="string">"\r\n"</span>);</div><div class="line">                        content.append(<span class="string">"更新内容:\r\n"</span>);</div><div class="line">                        content.append(bean.getDes().replace(<span class="string">"\\r\\n"</span>,<span class="string">"\r\n"</span>));</div><div class="line">                        <span class="keyword">return</span> content.toString();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> CommonSubscriber&lt;String&gt;(mView) &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        mView.showUpdateDialog(s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        addSubscrebe(rxSubscription);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermissions</span><span class="params">(RxPermissions rxPermissions)</span> </span>&#123;</div><div class="line">        Subscription rxSubscription = rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Boolean granted)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (granted) &#123;</div><div class="line">                            mView.startDownloadService();</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            mView.showError(<span class="string">"下载应用需要文件写入权限哦~"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        addSubscrebe(rxSubscription);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>model层的实例由<code>Dagger2</code>注入到Presenter，由Presenter调用方法来控制存取</p>
<h1 id="RxJava-Retrofit"><a href="#RxJava-Retrofit" class="headerlink" title="RxJava + Retrofit"></a>RxJava + Retrofit</h1><p>和上面的MVP一样，依旧先总结下使用RxJava的好处：</p>
<ul>
<li>链式编程，直观、清晰、有序、简洁（逻辑上），即使是很复杂的逻辑，一个一个操作符传递下去也十分利于阅读，团队协作时能快速理解别人的逻辑</li>
<li>解决回调地狱（callback hell），避免层层嵌套，还有比层层嵌套更丑陋的代码块么</li>
<li>方便的线程切换，并且可以主线程子线程间多次来回切换，试想用传统的<code>AsycTask/Handler</code>做多次来回切换是不是菊花一紧？</li>
<li>与Presenter层契合，用操作符依照逻辑在P层处理数据流，还能为所有订阅统一绑定生命周期，防止内存泄漏</li>
<li>很多第三方开源库开始支持RxJava，与<code>Retrofit</code>等可以充分配合</li>
<li>附赠RxBus做事件总线</li>
<li><del>链式调用写起来很过瘾</del></li>
</ul>
<p>关于RxJava和Retrofit的用法这里就不赘述了，已经有很多文章介绍过基本用法了，这里主要指明在GeekNews中做了哪些封装来让<code>RxJava+Retrofit</code>用起来更方便：</p>
<ul>
<li>封装线程操作</li>
<li>封装返回结果的统一处理</li>
<li>封装错误的统一处理<br>代码分别如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装线程操作</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.<span class="function">Transformer&lt;T, T&gt; <span class="title">rxSchedulerHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observable.Transformer&lt;T, T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> observable.subscribeOn(Schedulers.io())</div><div class="line">                        .observeOn(AndroidSchedulers.mainThread());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装返回结果的统一处理</span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.Transformer&lt;GankHttpResponse&lt;T&gt;, T&gt; handleResult() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observable.Transformer&lt;GankHttpResponse&lt;T&gt;, T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;GankHttpResponse&lt;T&gt;&gt; httpResponseObservable)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> httpResponseObservable.flatMap(<span class="keyword">new</span> Func1&lt;GankHttpResponse&lt;T&gt;, Observable&lt;T&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(GankHttpResponse&lt;T&gt; tGankHttpResponse)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span>(!tGankHttpResponse.getError()) &#123;</div><div class="line">                            <span class="keyword">return</span> createData(tGankHttpResponse.getResults());</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ApiException(<span class="string">"服务器返回error"</span>));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面两个方法都可以借助RxJava的<code>compose</code>操作符直接调用，<code>compose</code>操作符的作用就是允许我们在<code>Transformer</code>对象中封装一系列的操作，从而在不打破链式调用的前提下封装一些重复性的操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//封装错误的统一处理</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> BaseView mView;</div><div class="line">    <span class="keyword">private</span> String mErrorMsg;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">CommonSubscriber</span><span class="params">(BaseView view)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView = view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">CommonSubscriber</span><span class="params">(BaseView view, String errorMsg)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView = view;</div><div class="line">        <span class="keyword">this</span>.mErrorMsg = errorMsg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (mErrorMsg != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(mErrorMsg)) &#123;</div><div class="line">            mView.showError(mErrorMsg);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ApiException) &#123;</div><div class="line">            mView.showError(e.toString());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpException) &#123;</div><div class="line">            mView.showError(<span class="string">"数据加载失败ヽ(≧Д≦)ノ"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mView.showError(<span class="string">"未知错误ヽ(≧Д≦)ノ"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RxJava的<code>Observer&lt;T&gt;</code>接口有三个方法，经过一系列的操作符处理后，最终数据会由<code>onNext</code>方法发出，所以为了应对大多数场景我们可以做一层封装，对发生错误的回调<code>onError</code>做统一处理，让上层专注于处理<code>onNext</code>中的逻辑<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Subscription rxSubscription = mRetrofitHelper.fetchGirlList(NUM_OF_PAGE,currentPage)</div><div class="line">                .compose(RxUtil.&lt;GankHttpResponse&lt;List&lt;GankItemBean&gt;&gt;&gt;rxSchedulerHelper())</div><div class="line">                .compose(RxUtil.&lt;List&lt;GankItemBean&gt;&gt;handleResult())</div><div class="line">                .subscribe(<span class="keyword">new</span> CommonSubscriber&lt;List&lt;GankItemBean&gt;&gt;(mView) &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;GankItemBean&gt; gankItemBeen)</span> </span>&#123;</div><div class="line">                        mView.showContent(gankItemBeen);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        addSubscrebe(rxSubscription);</div></pre></td></tr></table></figure></p>
<p>在<code>CommonSubscriber</code>中传入View层对象，发生错误后将错误信息直接传递到View层做展示</p>
<p>最后再总结下Retrofit，OkHttp，RxJava在一次网络请求中各自的职责，在GeekNews中的写法大致可以用一张图来描述：  </p>
<p><img src="http://odck16ake.bkt.clouddn.com/android_geeknews_1.png" alt=""></p>
<p><code>Retrofit</code>作为上层网络框架，<code>OkHttp</code>作为底层网络框架，<code>RxJava</code>处理数据流，完美配合~<br>并且这三者都具有非常强大的扩展性，你可以针对具体的项目或业务，为Retrofit.Builder添加各种自定义的<code>Factory</code>，为OkHttp.Buidler添加各种<code>Interceptor</code>，为RxJava封装多种操作符，玩出各种花样</p>
<h1 id="Dagger2"><a href="#Dagger2" class="headerlink" title="Dagger2"></a>Dagger2</h1><p><code>Dagger2</code>的学习曲线应该是这几者中最高的，其中一部分原因是因为很多人可能学习了一段时间后甚至都没弄明白<code>Dagger2</code>究竟是用来做什么的，我始终认为在学习一个框架前第一件事情就是要认清这个框架可以为我们带来什么好处，在弄明白这个问题之后，不仅有助于你去理解整个框架的设计思路，也能方便你找出最合适的使用场景从而灵活运用。如果你已经学过了<code>Dagger2</code>中那些注解的基本含义，但是还是不知道该从何下手，或不明白<code>Dagger2</code>能做到哪些事，希望下面的内容可以帮你解惑</p>
<p><code>Dagger2</code>是一款帮助我们完成<code>依赖注入</code>的框架，从而做到降低耦合，解除依赖关系，可复用，易测试等等，下面举个栗子来说明：</p>
<p>参考Google的<a href="https://google.github.io/dagger/users-guide" target="_blank" rel="external">DaggerGuide</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CofferMaker</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Pump pump;</div><div class="line"></div><div class="line">	CofferMaker() &#123;</div><div class="line">	<span class="keyword">this</span>.heater = <span class="keyword">new</span> ElectricHeater();</div><div class="line">	<span class="keyword">this</span>.pump = <span class="keyword">new</span> Thermosiphon(heater);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最直接的写法，咖啡机依赖于加热器和泵，泵又依赖加热器，这里直接在咖啡机里面new了电加热器和虹吸泵，试想哪天出现了比电加热器更好的其他加热器，我们为了升级需要找到依赖着电加热器的咖啡机一同修改，不仅是咖啡机，其他与电加热器强依赖的对象都要受波及，如果我们换一种方式，将依赖注入进来，会显得灵活得多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CofferMaker</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Pump pump;</div><div class="line">	</div><div class="line">	CofferMaker(Heater heater, Pump pump) &#123;</div><div class="line">		<span class="keyword">this</span>.heater = checkNotNull(heater);</div><div class="line">		<span class="keyword">this</span>.pump = checkNotNull(pump);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是上面提到的<code>依赖注入</code>，灵活性与扩展性有了明显的提升，这时你可能会说，那我的注意力不就要转移到传入的参数上了吗？我还得帮咖啡机去找这些参数对象，这就是<code>Dagger2</code>可以为我们做的，需要依赖什么，它来帮我们找，下面以GeekNews中的<code>HttpModule</code>为例，这个例子更贴近我们平时的使用场景</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    Retrofit.<span class="function">Builder <span class="title">provideRetrofitBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    OkHttpClient.<span class="function">Builder <span class="title">provideOkHttpBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ZhihuUrl</span></div><div class="line">    <span class="function">Retrofit <span class="title">provideZhihuRetrofit</span><span class="params">(Retrofit.Builder builder, OkHttpClient client)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> createRetrofit(builder, client, ZhihuApis.HOST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">OkHttpClient <span class="title">provideClient</span><span class="params">(OkHttpClient.Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">            HttpLoggingInterceptor loggingInterceptor = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">            loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);</div><div class="line">            builder.addInterceptor(loggingInterceptor);</div><div class="line">        &#125;</div><div class="line">        File cacheFile = <span class="keyword">new</span> File(Constants.PATH_CACHE);</div><div class="line">        Cache cache = <span class="keyword">new</span> Cache(cacheFile, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>);</div><div class="line">        Interceptor cacheInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request request = chain.request();</div><div class="line">                <span class="keyword">if</span> (!SystemUtil.isNetworkConnected()) &#123;</div><div class="line">                    request = request.newBuilder()</div><div class="line">                            .cacheControl(CacheControl.FORCE_CACHE)</div><div class="line">                            .build();</div><div class="line">                &#125;</div><div class="line">                Response response = chain.proceed(request);</div><div class="line">                <span class="keyword">if</span> (SystemUtil.isNetworkConnected()) &#123;</div><div class="line">                    <span class="keyword">int</span> maxAge = <span class="number">0</span>;</div><div class="line">                    <span class="comment">// 有网络时, 不缓存, 最大保存时长为0</span></div><div class="line">                    response.newBuilder()</div><div class="line">                            .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, max-age="</span> + maxAge)</div><div class="line">                            .removeHeader(<span class="string">"Pragma"</span>)</div><div class="line">                            .build();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 无网络时，设置超时为4周</span></div><div class="line">                    <span class="keyword">int</span> maxStale = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">28</span>;</div><div class="line">                    response.newBuilder()</div><div class="line">                            .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, only-if-cached, max-stale="</span> + maxStale)</div><div class="line">                            .removeHeader(<span class="string">"Pragma"</span>)</div><div class="line">                            .build();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"><span class="comment">//        Interceptor apikey = new Interceptor() &#123;</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public Response intercept(Chain chain) throws IOException &#123;</span></div><div class="line"><span class="comment">//                Request request = chain.request();</span></div><div class="line"><span class="comment">//                request = request.newBuilder()</span></div><div class="line"><span class="comment">//                        .addHeader("apikey",Constants.KEY_API)</span></div><div class="line"><span class="comment">//                        .build();</span></div><div class="line"><span class="comment">//                return chain.proceed(request);</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        设置统一的请求头部参数</span></div><div class="line"><span class="comment">//        builder.addInterceptor(apikey);</span></div><div class="line">        <span class="comment">//设置缓存</span></div><div class="line">        builder.addNetworkInterceptor(cacheInterceptor);</div><div class="line">        builder.addInterceptor(cacheInterceptor);</div><div class="line">        builder.cache(cache);</div><div class="line">        <span class="comment">//设置超时</span></div><div class="line">        builder.connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">        builder.readTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</div><div class="line">        <span class="comment">//错误重连</span></div><div class="line">        builder.retryOnConnectionFailure(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">ZhihuApis <span class="title">provideZhihuService</span><span class="params">(@ZhihuUrl Retrofit retrofit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(ZhihuApis.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Retrofit <span class="title">createRetrofit</span><span class="params">(Retrofit.Builder builder, OkHttpClient client, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> builder</div><div class="line">                .baseUrl(url)</div><div class="line">                .client(client)</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的依赖关系如下：</p>
<ul>
<li><code>ZhihuApis</code>依赖于<code>Retrofit</code></li>
<li><code>Retrofit</code>依赖于<code>Retrofit.Builder</code>和<code>OkHttpClient</code></li>
<li><code>OkHttpClient</code>依赖于<code>OkHttpClient.Builder</code></li>
</ul>
<p>但是我并不用关注这些依赖关系，我只需要把依赖列在参数中即可，<code>Dagger2</code>会自动帮我找到提供依赖的provide或inject，生成依赖关系的代码，代替了手动传参（手动注入依赖），参考<a href="http://android.jobbole.com/82705/" target="_blank" rel="external">这篇文章</a>，Dagger2寻找依赖的过程如下：</p>
<blockquote>
<p>步骤1：查找Module中是否存在创建该类的方法。<br>步骤2：若存在创建类方法，查看该方法是否存在参数<br>    步骤2.1：若存在参数，则按从<strong>步骤1</strong>开始依次初始化每个参数<br>    步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束<br>步骤3：若不存在创建类方法，则查找Inject注解的构造函数，<br>           看构造函数是否存在参数<br>    步骤3.1：若存在参数，则从<strong>步骤1</strong>开始依次初始化每个参数<br>    步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</p>
</blockquote>
<p>现在可以做如下总结，假如不使用<code>Dagger2</code>时，我们需要面临的问题：</p>
<ul>
<li>要时刻关注依赖的先后顺序，被依赖对象要在依赖者之前创建</li>
<li>某个被依赖者发现变化，若没有以注入的方式依赖，会牵连一部分依赖者</li>
<li>错综复杂的函数调用与参数传递</li>
</ul>
<p>使用<code>Dagger2</code>后：</p>
<ul>
<li>无需关心先后顺序或依赖关系，由<code>Dagger2</code>帮你找到参数中需要依赖的对象的Provider或构造函数，进而确定依赖关系，省力省心</li>
<li>某个被依赖者发生变化只需要修改其对应的Provider或构造函数即可，不用修改依赖者，避免了直接使用<code>new</code>带来的耦合问题，如果变化后产生了同种类型的依赖使用<code>Qualifier</code>注解加以区分即可</li>
<li>依赖被统一到了<code>Module</code>中，由<code>Inject</code>标注构造函数或<code>Provide</code>提供，非常清晰直观，方便管理</li>
<li>每个provide相对独立，可以替换具体实现做单元测试</li>
<li>最后你可能会达到这种境界：蛤？需求变更又多了个依赖？在构造函数里加上这个依赖，相应的再加个provide或标注个inject~ 收工~ 至于新加的依赖和其他依赖谁先谁后，哪些依赖我，我又依赖哪些和我有什么关系？</li>
</ul>
<p>最后提一下<code>Scope</code>注解的一些常见误解：</p>
<ul>
<li><code>Singleton</code>也是一个<code>Scope</code>注解，它本身并没有创造单例的能力，是由于它通常配合管理全局类实例的<code>Component</code>使用，而有了单例的效果，所以<code>Scope</code>的具体效果与它依赖的<code>Component</code>相关</li>
<li><code>Scope</code>最大的作用是限制，并不是定义一个<code>ActivityScope</code>就神奇的绑定了<code>Activity</code>的生命周期，不同层级的<code>Component</code>需要定义不同的<code>Scope</code>，从而规范作用域，也可以借助<code>Scope</code>实现局部单例</li>
</ul>
<p>结合这些总结和上面<code>Module</code>注解中的代码不知道你有没有些许感悟呢(=￣ω￣=)</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>GeekNews只是一个小项目，而且仍有很多不完善的地方，还无法把MVP，RxJava，Dagger等的优势充分展现，尤其是MVP和Dagger，在入门级项目中甚至会徒增代码量，还有类与接口的数量，但是在越大型的项目上越能发挥它们解耦，解除依赖的优势。这就需要我们充分理解这些框架或架构思路诞生之初的目的和内部的实现原理，不是为了用而用，或依照模板机械的使用，而是可以根据场景在最需要的地方用出效果，并加以合理的封装与改造让它更适合我们的项目，最终帮助我们构建出更好的应用(&lt;ゝω·)</p>
<p>上面很多内容都是自己的理解，如果有错误或不足之处也欢迎指出，互相学习~</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/" target="_blank" rel="external">从零开始的Android新项目4 - Dagger2篇</a><br><a href="https://yuanjunli.github.io/2016/11/26/rxjava+retrofit+OkHttp%E5%B0%81%E8%A3%85/" target="_blank" rel="external">RxJava+Retrofit+OkHttp封装</a>  </p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;貌似这是一篇迟到了几个月的文章？总结一下搭建GeekNews时关于MVP，RxJava，Retrofit，Dagger2的一些心得&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="blog.codeest.moe/categories/Android/"/>
    
    
      <category term="android" scheme="blog.codeest.moe/tags/android/"/>
    
      <category term="rxjava" scheme="blog.codeest.moe/tags/rxjava/"/>
    
      <category term="mvp" scheme="blog.codeest.moe/tags/mvp/"/>
    
      <category term="retrofit" scheme="blog.codeest.moe/tags/retrofit/"/>
    
      <category term="dagger2" scheme="blog.codeest.moe/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Android性能调优</title>
    <link href="blog.codeest.moe/2017/02/14/android-performance/"/>
    <id>blog.codeest.moe/2017/02/14/android-performance/</id>
    <published>2017-02-13T16:18:13.000Z</published>
    <updated>2017-02-16T18:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>文章会依照如下目录来整理优化点，也算是给自己挖个坑，以后有新的优化点会逐步补充进来，持续更新，也欢迎大家查漏补缺(´・ω・`)</p>
<ul>
<li>启动加速</li>
<li>内存相关</li>
<li>渲染相关</li>
<li>编码相关</li>
<li>非性能优化点</li>
<li>性能调试工具篇</li>
</ul>
<h1 id="启动加速"><a href="#启动加速" class="headerlink" title="启动加速"></a>启动加速</h1><h3 id="Splash页面"><a href="#Splash页面" class="headerlink" title="Splash页面"></a>Splash页面</h3><p>从应用启动到完全渲染出第一个页面，中间的加载时间应用会呈现白屏或黑屏状态，Material Design设计规范建议我们应该给这段时间设置一张闪屏图（即占位图），让用户感到整个启动过程“毫无违和感”<br>写一个有闪屏图作为背景主题<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="SplashTheme" parent="AppTheme"&gt;</div><div class="line">        &lt;item name="android:windowBackground"&gt;@drawable/splash_bg&lt;/item&gt;</div><div class="line">        &lt;item name="android:windowIsTranslucent"&gt;false&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>创建一个专门用于显示启动页的SplashActivity设置该主题<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=".ui.main.activity.WelcomeActivity"</div><div class="line">            android:theme="@style/SplashTheme"</div><div class="line">            android:screenOrientation="portrait"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name="android.intent.action.MAIN" /&gt;</div><div class="line"></div><div class="line">                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<h3 id="初始化组件及三方库"><a href="#初始化组件及三方库" class="headerlink" title="初始化组件及三方库"></a>初始化组件及三方库</h3><p>在<code>Application</code>的<code>onCreate</code>方法中我们通常会做一些基础组件或第三方库的初始化工作，过于繁重的加载任务会影响应用从启动到显示<code>MainActivity</code>的间隔时间，所以应该遵循如下原则：  </p>
<ul>
<li><code>异步加载</code> 可以在子线程中初始化的任务放到子线程中完成（<code>new Thread</code>或<code>IntentService</code>）</li>
<li><code>延迟加载</code> 不可以在子线程中初始化，但不需要启动后立刻使用的库可以在<code>MainActivity</code>渲染完成后再加载，或给一个固定时间延迟加载</li>
<li><code>懒加载</code> 顾名思义，需要使用时才加载，不使用则不加载</li>
<li><code>常规加载</code> 如果必须在主线程中加载且要启动后需要立即生效的库，则在<code>Application</code>的<code>onCreate</code>方法中加载</li>
</ul>
<p>异步加载<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        instance = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">//初始化屏幕宽高</span></div><div class="line">        getScreenSize();</div><div class="line"></div><div class="line">        <span class="comment">//在子线程中初始化</span></div><div class="line">        InitializeService.start(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializeService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_INIT = <span class="string">"initApplication"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitializeService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"InitializeService"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(context, InitializeService.class);</div><div class="line">        intent.setAction(ACTION_INIT);</div><div class="line">        context.startService(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> String action = intent.getAction();</div><div class="line">            <span class="keyword">if</span> (ACTION_INIT.equals(action)) &#123;</div><div class="line">                initApplication();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initApplication</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化日志</span></div><div class="line">        Logger.init(getPackageName()).hideThreadInfo();</div><div class="line"></div><div class="line">        <span class="comment">//初始化错误收集</span></div><div class="line"><span class="comment">//        CrashHandler.init(new CrashHandler(getApplicationContext()));</span></div><div class="line">        initBugly();</div><div class="line"></div><div class="line">        <span class="comment">//初始化内存泄漏检测</span></div><div class="line">        LeakCanary.install(App.getInstance());</div><div class="line"></div><div class="line">        <span class="comment">//初始化过度绘制检测</span></div><div class="line">        BlockCanary.install(getApplicationContext(), <span class="keyword">new</span> AppBlockCanaryContext()).start();</div><div class="line"></div><div class="line">        <span class="comment">//初始化tbs x5 webview</span></div><div class="line">        QbSdk.allowThirdPartyAppDownload(<span class="keyword">true</span>);</div><div class="line">        QbSdk.initX5Environment(getApplicationContext(), QbSdk.WebviewInitType.FIRSTUSE_AND_PRELOAD, <span class="keyword">new</span> QbSdk.PreInitCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCoreInitFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewInitFinished</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBugly</span><span class="params">()</span> </span>&#123;</div><div class="line">        Context context = getApplicationContext();</div><div class="line">        String packageName = context.getPackageName();</div><div class="line">        String processName = SystemUtil.getProcessName(android.os.Process.myPid());</div><div class="line">        CrashReport.UserStrategy strategy = <span class="keyword">new</span> CrashReport.UserStrategy(context);</div><div class="line">        strategy.setUploadProcess(processName == <span class="keyword">null</span> || processName.equals(packageName));</div><div class="line">        CrashReport.initCrashReport(context, Constants.BUGLY_ID, isDebug, strategy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>延迟加载<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    	setContentView(R.layout.activity_main);</div><div class="line">  		getWindow().getDecorView().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">	   		<span class="meta">@Override</span></div><div class="line">	  		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	    	myHandler.post(mLoadingRunnable);</div><div class="line">	  	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h1><ul>
<li><p>Bitmap不再使用时没有及时<code>recycler()</code>导致的泄漏，关于这点可以用<code>LruCache</code>来辅助管理<code>Bitmap</code>，具体如何操作在以前的一篇文章<a href="">ECardFlow踩坑记</a>的最后有提及，这里就不赘述了，为了防止加载大量Bitmap导致的OOM，还要注意对Bitmap的<code>inSampleSize</code>缩放比例和<code>decodeformat</code>解码格式做调整</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">            options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">            BitmapFactory.decodeResource(mContext.getResources(), mRes[position], options);</div><div class="line">            <span class="keyword">int</span> inSampleSize = Math.min(options.outWidth / width, options.outHeight / height);</div><div class="line">            <span class="keyword">int</span> dstSample = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (inSampleSize &gt; dstSample) &#123;</div><div class="line">                dstSample = inSampleSize;</div><div class="line">            &#125;</div><div class="line">            options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">//根据实际需要的图片大小来加载，当原图过大时会按比例缩放，而不是直接加载原图浪费内存空间</span></div><div class="line">            options.inSampleSize = dstSample;</div><div class="line">            <span class="comment">//RGB_565、ARGB_4444等略微牺牲一些清晰度比ARGB_8888占用更少的空间</span></div><div class="line">            options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class="line">            <span class="keyword">return</span> BitmapFactory.decodeResource(mContext.getResources(), mRes[position], options);</div></pre></td></tr></table></figure>
</li>
<li><p>某些场景考虑使用<code>applicationContext</code>代替<code>activityContext</code>，尤其是将引用传入单例\静态对象时，防止<code>Activity</code>被持有引用无法回收</p>
</li>
<li>善用<code>软引用</code>，<code>弱引用</code>，一句话概括四种引用的话：<ul>
<li><code>强引用</code>，JVM宁可OOM也不会主动回收的引用</li>
<li><code>软引用SoftReference&lt;T&gt;</code>，内存不足时才回收的引用</li>
<li><code>弱引用WeakReference&lt;T&gt;</code>，GC时只要发现了就会被回收的引用</li>
<li><code>虚引用PhantomReference&lt;T&gt;</code>，形同虚设，随时可能被回收的引用</li>
</ul>
</li>
<li><p>非静态内部类或匿名类会默认持有外部类的引用，和外部类无关时应该定义成<code>static</code>静态内部类，如下使用<code>Static + WeakReference</code>的方式来达到断开Handler与Activity之间存在引用关系</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">        WeakReference&lt;ECardFlowLayout&gt; mLayout;</div><div class="line"></div><div class="line">        MyHandler(ECardFlowLayout layout) &#123;</div><div class="line">            mLayout = <span class="keyword">new</span> WeakReference&lt;&gt;(layout);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            ECardFlowLayout layout = mLayout.get();</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MSG_JUDGE_RESET:</div><div class="line">                    layout.judgeReset();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>部分Android系统自带的服务类在注册使用完毕后需要反注册<code>unregister()</code>，Java文件流等资源型对象使用完毕后应该关闭<code>close()</code></p>
</li>
<li>单例对象往往是静态的，若向其中注册监听<code>addListener</code>传入对象，需要在使用结束后清除监听<code>置null</code>，防止持续持有引用</li>
<li>及时清理集合类中不再使用的引用，否则集合会越来越大，如果集合是static的话会更严重</li>
<li>部分第三方库为避免泄漏会提供类似<code>Destroy()</code>，<code>Recycler()</code>方法，注意调用</li>
</ul>
<h1 id="渲染相关"><a href="#渲染相关" class="headerlink" title="渲染相关"></a>渲染相关</h1><ul>
<li>使用<code>include</code>标签复用布局，提高代码可读性</li>
<li>使用<code>merge</code>标签合并最外层根布局，减少一层层级，通常配合<code>include</code>或自定义<code>ViewGroup</code>或布局顶点是<code>FrameLayout</code>且不需要设置background或padding等属性的场景</li>
<li>使用<code>ViewStub</code>标签，在该视图需要加载时才加载，比渲染后再<code>View.GONE</code>更好</li>
<li>当需要空视图填充空间时用<code>&lt;Space&gt;</code>比<code>&lt;View&gt;</code>更合适</li>
<li><code>RelativeLayout</code>中子View的<code>onMeasuer</code>会执行两次，<code>LinearLayout</code>使用<code>weight</code>属性时也是，所以优先使用<code>LinearLayout</code>和<code>FrameLayout</code>完成布局，避免<code>RelativeLayout</code>层层嵌套</li>
<li><code>TextView</code>的<code>drawableLeft</code>等属性可以替代<code>TextView</code>+<code>ImageView</code>的组合</li>
<li><code>TextView</code>使用<code>\n</code>换行，<code>android:lineSpacingMultiplier</code>控制行间距，<code>SpannableString</code>做文字图片混编或局部文字大小、颜色、点击事件等等的控制可以满足大多数场景，而不是使用多个<code>TextView</code></li>
<li>在合适的场景下尝试使用体积很小的<code>WebP格式</code>，支持拉伸的<code>.9图</code>，<code>SVG矢量图</code>及其动画</li>
<li>包含大量绘制的复杂动画使用<code>SurfaceView</code>或<code>TextureView</code>来完成</li>
<li>无交互、纯展示的自定义控件效果，用自定义<code>Drawable</code>比自定义<code>View</code>更高效</li>
<li>应用运行后打开手机设置中的<code>gpu呈现模式分析</code>，出现红色的地方说明发生了<code>多层过度绘制</code>，举个栗子即父布局设置了背景颜色，子布局及其子布局又设置了背景颜色，在同一片区域做了多次重复渲染，这时候就需要去排查问题了</li>
</ul>
<h1 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h1><ul>
<li>使用在内存层面做过优化的<code>ArrayMap/SparseArray</code>代替<code>HashMap</code></li>
<li>避免在Android里面使用<code>Enum</code>，开销是<code>final static</code>的数倍</li>
<li>大量字符串拼接时使用<code>StringBuilder</code>代替<code>String</code>，并发场景下使用<code>StringBuffer</code></li>
<li>使用基本类型时注意避免无意义的装箱拆箱</li>
<li>善用经典算法，如<code>快排法</code>，<code>二分法</code>等，减少时间复杂度</li>
<li>反射<code>Reflect</code>只是黑科技，会增加性能负担，避免大量使用</li>
</ul>
<h1 id="其他非性能优化点"><a href="#其他非性能优化点" class="headerlink" title="其他非性能优化点"></a>其他非性能优化点</h1><p>除了最直观的性能优化外，还有一些优化点也可以提升用户体验</p>
<ul>
<li>APK安装包瘦身(方便下载或更新)</li>
<li>电量优化(省电)</li>
<li>网络流量优化(省流量)</li>
<li>弱网络状态优化(渣网也能玩的溜)</li>
<li>离线缓存优化(没网也能玩的溜)</li>
</ul>
<h1 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h1><p>本篇只列举工具，起个索引作用，每种调试工具的具体用法已经有很多优秀的文章介绍过了，可以参考附上的链接</p>
<h3 id="0-nbsp-LeakCanary"><a href="#0-nbsp-LeakCanary" class="headerlink" title="0.&nbsp;LeakCanary"></a>0.&nbsp;LeakCanary</h3><p>Square公司开源的内存泄漏检测库，发生泄漏时会记录下泄漏的调用堆栈，可以非常方便的定位泄漏点<br>开源地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a></p>
<h3 id="1-nbsp-Strictmode"><a href="#1-nbsp-Strictmode" class="headerlink" title="1.&nbsp;Strictmode"></a>1.&nbsp;Strictmode</h3><p>Android自带，可以在代码中开启，严格模式下规范了开发者的行为，若写出了违反严格策略的代码会给予警告<br>参考链接：<a href="http://www.jianshu.com/p/2ebc9363ea16" target="_blank" rel="external">StrickMode严苛模式检测耗时与内存问题</a></p>
<h3 id="2-nbsp-Lint"><a href="#2-nbsp-Lint" class="headerlink" title="2.&nbsp;Lint"></a>2.&nbsp;Lint</h3><p>Android Studio自带，lint是多功能的静态检测扫描工具，可以发现的问题包括：</p>
<ul>
<li>缺少翻译的文本</li>
<li>布局性能（无意义的嵌套等）</li>
<li>未使用到的资源（代码、图片等）</li>
<li>不一致的数组大小</li>
<li>硬编码</li>
<li>图标问题（缺少、重复、错误等问题）</li>
<li>可用性问题（如未指定的文本字段的输入类型）</li>
<li>manifest文件的错误</li>
</ul>
<p>参考链接：<a href="http://blog.csdn.net/xyz_lmn/article/details/14222939" target="_blank" rel="external">Android代码优化——使用Android lint工具</a></p>
<h3 id="3-nbsp-TraceView、Systrace"><a href="#3-nbsp-TraceView、Systrace" class="headerlink" title="3.&nbsp;TraceView、Systrace"></a>3.&nbsp;TraceView、Systrace</h3><p>Android自带，可以方便的查看各线程的执行情况，以及采集CPU数据等等，最常用于追踪每个方法的执行时间，定位耗时点，进而优化<br>参考链接：<a href="http://www.jianshu.com/p/388c693c1b58" target="_blank" rel="external">TraceView 分析图怎么看</a></p>
<h3 id="4-nbsp-HierarchyViewer"><a href="#4-nbsp-HierarchyViewer" class="headerlink" title="4.&nbsp;HierarchyViewer"></a>4.&nbsp;HierarchyViewer</h3><p>SDK自带，可查看布局层次结构，View绘制时耗时<br>参考链接：<a href="http://blog.csdn.net/xyz_lmn/article/details/14222975" target="_blank" rel="external">Android UI 优化——使用HierarchyViewer工具</a></p>
<h3 id="5-nbsp-Allaction-Tracing"><a href="#5-nbsp-Allaction-Tracing" class="headerlink" title="5.&nbsp;Allaction Tracing"></a>5.&nbsp;Allaction Tracing</h3><p>DDMS自带，执行某步操作后，详细的看到内存发生的变化<br>参考链接：<a href="http://www.jianshu.com/p/d9e426c10581" target="_blank" rel="external">Allaction Tracing追踪内存分配的轨迹</a></p>
<p>OK收工~ 滚去睡觉。。(=￣ω￣=)</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://kaedea.com/2015/11/12/android-best-performance-points/" target="_blank" rel="external">性能调优・技术优化点</a><br><a href="http://www.jianshu.com/p/b3b09fa29f65" target="_blank" rel="external">Android性能优化的方方面面</a><br><a href="http://www.jianshu.com/p/f7d59ffb7747" target="_blank" rel="external">App性能优化系列结语篇</a><br><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="external">Android内存优化之OOM</a></p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android性能优化的文章已经满大街了，不过这种重要的东西还是很有必要自己亲手梳理一遍的，把零散的东西整理的井井有条才好~ 本文会从启动加速、内存泄漏、视图渲染、优化编码、性能调试工具这些角度来总结&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="blog.codeest.moe/categories/Android/"/>
    
    
      <category term="android" scheme="blog.codeest.moe/tags/android/"/>
    
      <category term="performance" scheme="blog.codeest.moe/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>ECardFlow踩坑记</title>
    <link href="blog.codeest.moe/2017/02/12/android-ecardflow/"/>
    <id>blog.codeest.moe/2017/02/12/android-ecardflow/</id>
    <published>2017-02-11T18:04:38.000Z</published>
    <updated>2017-02-25T16:35:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常逛Material UP，发现了Leo Leung设计的<a href="https://ios.uplabs.com/posts/multiple-card-flow" target="_blank" rel="external">multiple-card-flow</a>,觉得效果不错于是写了对应的效果库<a href="https://github.com/codeestX/ECardFlow" target="_blank" rel="external">ECardFlow</a>，随后尾随到他的dribbble，看到了<a href="https://dribbble.com/shots/2772170-ToFind-Concept-Controller" target="_blank" rel="external">ToFind-Concept-Controller</a>，感觉也不错，索性又做了ECardFlowLayout一起放到了这个库里  </p>
<p>ECardFlow是一个用于复数卡片滑动与展开效果的自定义ViewPager控件<br>ECardFlowLayout是一个为ViewPager提供多种联动背景效果的布局，本体是FrameLayout  </p>
<p>这篇文章主要是记录下开发过程中踩过的坑，所以下面就按要点来说了</p>
<h1 id="ViewPager"><a href="#ViewPager" class="headerlink" title="ViewPager"></a>ViewPager</h1><ul>
<li>在<code>ViewPager</code>中同时显示多个子page，需要给<code>ViewPager</code>的父布局加上属性<code>android:clipChildren=&quot;false&quot;</code>，确保不会将超出<code>ViewPager</code>范围的子视图裁剪</li>
<li>使用<code>ViewPager</code>的<code>setOffscreenPageLimit(mPreloadPageNum);</code>来预先加载屏幕外的子page视图，否则当滑动到屏幕内才开始加载会有一个闪烁的过程，造成不好的体验，这个预加载的页面值也不宜设置的太高，会增加内存开销</li>
<li><code>ECardFlow</code>是不支持滚动的，只支持滑动切换，所以不会跟随手指移动悬停，那么就要重写<code>touchEvent</code>系列方法来屏蔽<code>ViewPager</code>自带的滑动事件处理，这点下面再谈。页面切换使用的是<code>setCurrentItem</code>方法，<code>ViewPager</code>的源码中能看到这个方法默认的切换时间是200ms，速度太快了不利于动画效果的展示，所以我们需要通过反射在运行时动态的修改滚动时间</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSwitchSpeed</span><span class="params">(<span class="keyword">float</span> scrollFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; viewpager = ViewPager.class;</div><div class="line">            Field scroller = viewpager.getDeclaredField(<span class="string">"mScroller"</span>);</div><div class="line">            scroller.setAccessible(<span class="keyword">true</span>);</div><div class="line">            Field interpolator = viewpager.getDeclaredField(<span class="string">"sInterpolator"</span>);</div><div class="line">            interpolator.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            mScroller = <span class="keyword">new</span> ScrollerCustomDuration(getContext(),</div><div class="line">                    (Interpolator) interpolator.get(<span class="keyword">null</span>));</div><div class="line">            mScroller.setScrollFactor(scrollFactor);</div><div class="line">            scroller.set(<span class="keyword">this</span>, mScroller);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="PageTransformer"><a href="#PageTransformer" class="headerlink" title="PageTransformer"></a>PageTransformer</h1><p><img src="http://odck16ake.bkt.clouddn.com/Github/GIF.gif" alt=""></p>
<p>可以看到ECardFlow在左右切换页面时会有一个绕Y轴立体旋转的效果，只需要自定义一个<code>ViewPager.PageTransformer</code>的接口实现类即可，实现接口中的<code>transformPage</code>方法，根据参数中当前页面的位置计算rotateY值赋给page，<code>page.setRotationY(mFraction * mMaxRotateY)</code>，最后给<code>ViewPager</code>设置这个Transformer<code>setPageTransformer(true, mTransformer);</code>。那么旋转角度的比率<code>mFraction</code>是怎么控制的呢？仔细观察效果可以看到，对一个页面而言在滑动起始时旋转角度为零，滑到下一个页面位置的过程中，角度先逐渐变大，到达中间位置时达到最大，然后逐渐变小，到达下一个页面位置时角度归零，至此完成一个滑动周期，后面继续滑动时依然保持这个规律。举个栗子，假如当前page的position是1，当position从1滑到1.5时角度逐渐变大，1.5到达峰值，随后下降直到position为2。用一个取绝对值的正弦函数来拟合这个过程不是正好吗！且一个滑动周期对应正弦函数上的半个周期，能计算出正弦函数的周期值是2，由此写出公式：  </p>
<p><img src="http://odck16ake.bkt.clouddn.com/android_ecardflow_0.png" alt=""></p>
<p><code>float mFraction = mDirection * (float) Math.abs(Math.sin(Math.PI * position));</code></p>
<p>其中<code>mDirection</code>是当前滑动的方向，向右滑动时向正方向旋转，rotateY值为正，反之为负，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View page, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> height = page.getHeight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> width = page.getWidth();</div><div class="line">        page.setPivotY(<span class="number">0.5f</span> * height);</div><div class="line">        page.setPivotX(<span class="number">0.5f</span> * width);</div><div class="line">        <span class="keyword">if</span> (position &gt;= -<span class="number">2</span> &amp;&amp; position &lt;= <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">float</span> mFraction = mDirection * (<span class="keyword">float</span>) Math.abs(Math.sin(Math.PI * position));</div><div class="line">            page.setRotationY(mFraction * mMaxRotateY);</div><div class="line">            page.setScaleX(PAGE_SCALE);</div><div class="line">            page.setScaleY(PAGE_SCALE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="TouchEvent"><a href="#TouchEvent" class="headerlink" title="TouchEvent"></a>TouchEvent</h1><p>处理手势最重要的是理清思路，明确什么时候该拦截事件、消耗事件或分发原事件处理<br>重写<code>onInterceptTouchEvent</code>，如果当前ECardFlow是未展开状态的话则拦截滑动事件，交由<code>onTouchEvent</code>处理，如果是展开状态的话则不拦截，由优先级更高的子控件来处理事件，在demo中是由<code>RecyclerView</code>来处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = event.getAction();</div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="keyword">if</span> (isSwitching) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                mInterLastX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                mInterLastY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="keyword">return</span> !isExpanding;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                mLastX = <span class="number">0</span>;</div><div class="line">                mLastY = <span class="number">0</span>;</div><div class="line">                mInterLastX = <span class="number">0</span>;</div><div class="line">                mInterLastY = <span class="number">0</span>;</div><div class="line">                hasReset = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>重写<code>onTouchEvent</code>，ECardFlow展开状态下自身不处理事件，否则滑动时判断左右方向来做切换，判断Y轴方向触发上滑来展开，若展开模式设置为点击展开，则是在手指离开屏幕时处理展开。中间加了一些标志位，主要判断当前切换或展开过程是否完成，防止重复执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isExpanding) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> action = event.getAction();</div><div class="line">            <span class="keyword">switch</span> (action) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    <span class="keyword">if</span>(mLastX == <span class="number">0</span>) &#123;</div><div class="line">                        mLastX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(mLastY == <span class="number">0</span>) &#123;</div><div class="line">                        mLastY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">int</span> mCurX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                    <span class="keyword">int</span> mCurY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                    <span class="keyword">if</span> (Math.abs(mCurX - mLastX) &gt; mSlop &amp;&amp; hasReset) &#123;</div><div class="line">                        hasReset = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (mCurX &gt; mLastX) &#123;</div><div class="line">                            gotoLast();</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            gotoNext();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(mExpandMode == SLIDE_UP_TO_EXPAND &amp;&amp; mLastY - mCurY &gt; mSlop &amp;&amp; hasReset &amp;&amp; !isSwitching) &#123;</div><div class="line">                        hasReset = <span class="keyword">false</span>;</div><div class="line">                        expand();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="keyword">int</span> mUpX = (<span class="keyword">int</span>) event.getRawX();</div><div class="line">                    <span class="keyword">int</span> mUpY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                    <span class="keyword">if</span> (mExpandMode == CLICK_TO_EXPAND &amp;&amp; Math.abs(mUpX - mInterLastX) &lt;= mSlop &amp;&amp; Math.abs(mUpY - mInterLastY) &lt;= mSlop &amp;&amp; !isSwitching) &#123;</div><div class="line">                        expand();</div><div class="line">                    &#125;</div><div class="line">                    mLastX = <span class="number">0</span>;</div><div class="line">                    mLastY = <span class="number">0</span>;</div><div class="line">                    hasReset = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="PaddingBottom"><a href="#PaddingBottom" class="headerlink" title="PaddingBottom"></a>PaddingBottom</h1><p>兴高采烈的撸完了代码，发现ECardFlow展开后将RecyclerView滑动到最底部会显示不全，WTF？！仔细分析发现，由于展开效果是基于Scale动画的，父布局的大小不会变化，放大后的RecyclerView有一部分已经在屏幕底部之外了，所以滑动到最底部时会暴露出显示不全的感觉，我们需要把这部分屏幕外的内容给“顶”回屏幕内，即计算这部分内容的高度，增加对应大小的<code>paddingBottom</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算额外的paddingBottom的大小</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getExtraPaddingBottom</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getHeight() * mRate &gt; DimenUtils.getScreenHeight(getContext().getApplicationContext())) &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) ((getHeight() * mRate - DimenUtils.getScreenHeight(getContext().getApplicationContext())) / mRate);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//展开动画结束后增加这段额外的paddingBottom</span></div><div class="line">anim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                ECardFlow.<span class="keyword">this</span>.setPadding(</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingLeft(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingTop(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingRight(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingBottom() + getExtraPaddingBottom());</div><div class="line">                <span class="keyword">super</span>.onAnimationEnd(animation);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//收缩动画开始时减去这段额外的paddingBottom        </span></div><div class="line">anim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                ECardFlow.<span class="keyword">this</span>.setPadding(</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingLeft(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingTop(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingRight(),</div><div class="line">                        ECardFlow.<span class="keyword">this</span>.getPaddingBottom() - getExtraPaddingBottom());</div><div class="line">                <span class="keyword">super</span>.onAnimationEnd(animation);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h1 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h1><p>ECardFlowLayout使用LruCache来管理Bitmap，LruCache本身并不具有缓存Bitmap的能力，它只是一个给定大小后可以依照Lru算法，在达到容量上限时优先移除最近最久未使用的对象的容器。<br>使用LruCache时可以重写3个重要方法：</p>
<ul>
<li><code>sizeOf</code>用于返回当前对象占据的容器容量，如果LruCache创建时传入的缓存空间大小是以内存大小为单位的话，这里也要返回对象占据的内存大小，比如<code>Bitmap</code>的大小<code>value.getBitmap().getByteCount()</code>。如果创建时是以数量为单位的话，这里直接返回1即可</li>
<li><code>entryRemoved</code>是对象从LruCache中移除时产生的回调，需要在这里做回收处理，但是需要注意的是在这里调用<code>bitmap.recycler()</code>要根据实际情况考虑，假如该bitmap从LruCache移除时仍在界面上显示，直接调用<code>recycler()</code>可能会导致问题，具体该在什么时候回收bitmap下面再详谈</li>
<li><code>create</code>是<code>mLruCache.get(key)</code>从当前缓存中未取到所需对象时才会调用的方法，此时get方法会把新创建的对象返回，如果不重写该方法就可能会返回null，需要做额外的判空处理  </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mLruCache = <span class="keyword">new</span> LruCache&lt;String, RecyclingBitmapDrawable&gt;(cacheSize) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, RecyclingBitmapDrawable value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getBitmap().getByteCount() / <span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">entryRemoved</span><span class="params">(<span class="keyword">boolean</span> evicted, String key, RecyclingBitmapDrawable oldValue, RecyclingBitmapDrawable newValue)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.entryRemoved(evicted, key, oldValue, newValue);</div><div class="line">                <span class="keyword">if</span> (evicted &amp;&amp; oldValue != <span class="keyword">null</span>) &#123;</div><div class="line">                    oldValue.setIsCached(<span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> RecyclingBitmapDrawable <span class="title">create</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">                RecyclingBitmapDrawable bitmap = <span class="keyword">new</span> RecyclingBitmapDrawable(getResources(), mProvider.onProvider(Integer.valueOf(key)));</div><div class="line">                <span class="keyword">if</span> (bitmap.getBitmap() == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                bitmap.setIsCached(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">return</span> bitmap;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p>现在承接上面，继续说一说bitmap应该在什么时候回收，这里定义了一个<code>RecyclingBitmapDrawable</code>来负责判断回收时机  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclingBitmapDrawable</span> <span class="keyword">extends</span> <span class="title">BitmapDrawable</span> </span>&#123;</div><div class="line"></div><div class="line">	 <span class="comment">//记录缓存相关的引用数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCacheRefCount = <span class="number">0</span>;</div><div class="line">    <span class="comment">//记录显示相关的引用数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDisplayRefCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHasBeenDisplayed;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclingBitmapDrawable</span><span class="params">(Resources res, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(res, bitmap);</div><div class="line">    &#125;</div><div class="line">	 </div><div class="line">	 <span class="comment">//每当有ImageView等使用该Bitmap时就传入true让引用数加一，</span></div><div class="line">	 <span class="comment">//反之当不再使用时传入false让引用数减一，每次引用数发生变化</span></div><div class="line">	 <span class="comment">//都要判断是否应该回收</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsDisplayed</span><span class="params">(<span class="keyword">boolean</span> isDisplayed)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (isDisplayed) &#123;</div><div class="line">                mDisplayRefCount++;</div><div class="line">                mHasBeenDisplayed = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mDisplayRefCount--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        checkState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">//每当有LruCache等容器存入该Bitmap时就传入true让引用数加</span></div><div class="line">	 <span class="comment">//一，反之从容器中移除时传入false让引用数减一，每次引用数发</span></div><div class="line">	 <span class="comment">//生变化都要判断是否应该回收</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsCached</span><span class="params">(<span class="keyword">boolean</span> isCached)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (isCached) &#123;</div><div class="line">                mCacheRefCount++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mCacheRefCount--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        checkState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">//判断当前是否可以回收，当两个引用参数都为0时表示既不在界面上</span></div><div class="line">	 <span class="comment">//显示，也不在缓存容器中，此时就可以回收了</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">checkState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCacheRefCount &lt;= <span class="number">0</span> &amp;&amp; mDisplayRefCount &lt;= <span class="number">0</span> &amp;&amp; mHasBeenDisplayed</div><div class="line">                &amp;&amp; hasValidBitmap()) &#123;</div><div class="line">            getBitmap().recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasValidBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bitmap bitmap = getBitmap();</div><div class="line">        <span class="keyword">return</span> bitmap != <span class="keyword">null</span> &amp;&amp; !bitmap.isRecycled();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面注释写的已经很详细了，因此在<code>LruCache</code>的<code>entryRemoved</code>方法中应该执行一次<code>recyclingBitmapDrawable(false);</code>，而不是直接回收bitmap。在代码其他合适的地方用<code>setIsCached</code>和<code>setIsDisplayed</code>方法记录引用数就能让bitmap在正确的时机回收。</p>
<p>#Blur<br>关于高斯模糊效果，这里参考了<a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="external">glide-transformations</a>的做法，引入了两个模糊工具类</p>
<ul>
<li><code>FastBlur</code> Java编写的模糊算法</li>
<li><code>RSBlur</code> 使用Android自带的<code>RenderScript</code>来做模糊处理，使用时需要在<code>Gradle</code>文件中做相关配置</li>
</ul>
<blockquote>
<p>renderscriptTargetApi 23<br>renderscriptSupportModeEnabled true</p>
</blockquote>
<p>性能上来说<code>RSBlur</code>要更好一些，所以代码中模糊处理时会优先使用<code>RSBlur</code>，无法使用时则会去调用<code>FastBlur</code></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>OK收工~ 回顾一下这个项目还是用到不少知识点的，上面的介绍如果有疏漏或者错误也欢迎指出，更多详情戳repo地址<a href="https://github.com/codeestX/ECardFlow" target="_blank" rel="external">ECardFlow</a></p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月写了个开源库ECardFlow，期间又是花式踩坑，不过踩坑大法好，填坑全是收获~&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="blog.codeest.moe/categories/Android/"/>
    
    
      <category term="android" scheme="blog.codeest.moe/tags/android/"/>
    
      <category term="viewpager" scheme="blog.codeest.moe/tags/viewpager/"/>
    
      <category term="ecardflow" scheme="blog.codeest.moe/tags/ecardflow/"/>
    
      <category term="bitmap" scheme="blog.codeest.moe/tags/bitmap/"/>
    
  </entry>
  
  <entry>
    <title>那些年我玩过的音游</title>
    <link href="blog.codeest.moe/2017/01/25/acg-music-game/"/>
    <id>blog.codeest.moe/2017/01/25/acg-music-game/</id>
    <published>2017-01-25T15:48:55.000Z</published>
    <updated>2017-02-16T18:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="音游介绍"><a href="#音游介绍" class="headerlink" title="音游介绍"></a>音游介绍</h1><p>音游即《音乐游戏》，不断出现的各种按键（NOTE）合成一首歌曲，类似于奏乐。这类游戏主要考的是你对节奏的把握，以及手指的反应和眼力。完成一首难度比较高的音乐时，会有一种成就感。而且在心情不好的时候 弹一首会改变心情，是一种很有魅力的游戏。<del>这段才不是从百度百科抄的 2333</del><br>曾有一段时间沉迷音游不能自拔 _(:3 」∠)，这里分享下自己觉得不错的音游吧</p>
<h2 id="0-nbsp-节奏大师"><a href="#0-nbsp-节奏大师" class="headerlink" title="0.&nbsp;节奏大师"></a>0.&nbsp;节奏大师</h2><p>国民级音游，鹅厂出品，应该是国内玩家最多的音游了，每年也有办比赛。这款游戏算是很经典的音游，具备常规音游的所有基础特性，不过也正是因为经典，所以相比其他音游缺了一些创新点。免费歌曲很多，不过难度普遍偏低，难度高的歌获取途径比较麻烦，如果不折腾自制铺面的话度过新手期后会热情大减。<br>上面有提到自制铺面，<del>节奏大师对外开放了接口支持拓展（大雾）</del>，设备越狱后可以通过一些第三方工具去修改既有的歌曲和谱面，如果想玩到自己喜欢的歌或者更高难度的歌就只能去折腾一下啦，已经有不少音游爱好者自制了一些高难度谱面，比如经典的《风屿》，《少女幻葬》，难度已经上天了。。自制谱面相关的内容可以前往<a href="http://tieba.baidu.com/f?kw=%CB%AF%C3%CE%D6%D0&amp;fr=ala0&amp;tpl=5" target="_blank" rel="external">睡梦中吧</a></p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/0.png" alt="">  </p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/1.png" alt=""></p>
<h2 id="1-nbsp-Deemo"><a href="#1-nbsp-Deemo" class="headerlink" title="1.&nbsp;Deemo"></a>1.&nbsp;Deemo</h2><p>在音游界有一条公理：雷亚出品，必属精品。Deemo就是一款雷亚公司出品的游戏，这是一款单机游戏，有完整的主线故事，随着树的生长谜底会逐渐揭开，游戏中也有一些场景可以探索隐藏歌曲。所有歌曲主打的都是钢琴风格，包括打歌界面的UI也是钢琴风，钢琴风是这款游戏最大的特色之一，也让很多人领略到了钢琴的魅力。<br>游戏难度总体不高，因为这款游戏更讲究点击的准度，除了几首魔王曲之外不会拿到太低的分数，但也不容易趋于满分~<br>最最重要的是，这款游戏中钢琴曲的质量很高，插画也很精美，刚进入游戏最初的几首钢琴曲就打动了我，不多说了，墙裂推荐，如果只能推荐一款音游的话，那我推Deemo！  </p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/2.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/3.png" alt=""></p>
<h2 id="2-nbsp-Cytus"><a href="#2-nbsp-Cytus" class="headerlink" title="2.&nbsp;Cytus"></a>2.&nbsp;Cytus</h2><p>Cytus是雷亚公司发布的第一款音游，如果说Deemo的旋律特色是温润柔和的钢琴音，那么Cytus的整体风格就是喷薄激荡的重金属音。沿袭了雷亚一贯的特色，高质量的音乐与精美的插画，以及富有特色的UI。<br>Cytus也是一款单机游戏，不过没有明显的主线剧情，只能靠自己脑补了(￣ω￣)。还有非常重要的一点，Cytus中的免费歌曲很多，因为官方最初承诺过每达成10W下载量就免费开放一个新的章节，达成100W时开放终章。去年100W下载量就已经达成了，终章已开放，值得一玩~<br>Cytus的打歌模式与常规音游也有所不同，需要在扫描线扫过圆点时点击圆点，除了点击外还有Hold，Trace型的圆点，这也是Cytus的特色之一。游戏中还包含了很多有意思的彩蛋，许多隐藏歌曲都是通过对歌曲封面的一些操作才会出现，往往能带来惊喜！</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/4.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/5.png" alt=""></p>
<h2 id="3-nbsp-VOEZ"><a href="#3-nbsp-VOEZ" class="headerlink" title="3.&nbsp;VOEZ"></a>3.&nbsp;VOEZ</h2><p>雷亚公司的又一款音游，与以往不同，这是一款与其他公司合作推出的联网音游，不过依旧保持了雷亚的水准，VOEZ也有属于它自己的特色。如果让我给VOEZ归类的话，我会把它称为“视觉音游”，因为这款游戏最大的特色就是打歌时的视觉效果。<br>VOEZ不像通常的音游拥有固定的音轨（即音符下落的轨迹），它的音轨的数量、粗细、透明度、颜色会随着节奏不断变化，既提高了打歌的难度也丰富了视觉效果，如果刚玩可能还会吐槽“这音轨怎么这么坑啊！”，但是习惯了以后会发现这是一种不错的设计。<br>由于音轨也要随着音乐的节奏不断变化，所以一首曲子的制作成本也会比较大，VOEZ的免费歌曲不多，需要额外买曲包，不过曲包价格还算便宜，可以挑自己喜欢的歌去买~</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/6.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/7.png" alt=""></p>
<h2 id="4-nbsp-O2JamU"><a href="#4-nbsp-O2JamU" class="headerlink" title="4.&nbsp;O2JamU"></a>4.&nbsp;O2JamU</h2><p>劲乐团U (O2JAM U)是韩国第一款在线节奏动作游戏 “劲乐团”的手机版应用游戏，游戏总体玩法和节奏大师差不多，也算是一款传统音游，但是曲库非常庞大，量大的同时也依然保持了曲子的高质量。<br>O2JamU的打歌界面有一个特殊的倍率按键，随着打歌的进行会累计倍率，点击开启倍率效果时，一次按键可以得到X2、X3、X4倍的分数，所以想取得高分就要注意合理的使用倍率效果。<br>O2JamU的所有歌曲都可以视为免费歌曲，但是每次玩未购买的曲目会消耗一定的Point值，Point值要伴随着时间才能恢复，买断曲目后则可以无限玩。<br>O2JamU的难度把控的很好，难度粒度划分为Lv1-Lv30，我一般在玩Lv20+的歌曲时会开始吃力，所以从难度上来说适合各层次的玩家。</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/8.png" alt="">  </p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/9.png" alt=""></p>
<h2 id="5-nbsp-Zion载音"><a href="#5-nbsp-Zion载音" class="headerlink" title="5.&nbsp;Zion载音"></a>5.&nbsp;Zion载音</h2><p>Zion是一款有故事剧情的国产音游，而且它的一大特色是“人物”，游戏里的要素都是以“人物”为基本单位划分的，每个人物都有自己的背景故事（轻小说）、附带的曲包、打歌界面的UI、以及技能。所以玩Zion的一大乐趣是解锁不同的人物。<br>Zion提供了两种游戏模式，PURE模式与DUAL模式。PURE模式与传统音游类似，点击音符出现的位置即可，不过由于游戏界面一共有5个区域（四角及中心区）可能会出现音符，所以在熟悉之前难度还是比较大的。DUAL模式相对而言简单一些，根据音符的颜色点击四角对应颜色的区域即可。<br>漂亮的人物立绘+华丽的UI+不错的曲目，Zion也是一款值得体验的音游~</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/10.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/11.png" alt=""></p>
<h2 id="6-nbsp-喵赛克"><a href="#6-nbsp-喵赛克" class="headerlink" title="6.&nbsp;喵赛克"></a>6.&nbsp;喵赛克</h2><p>同步音律喵赛克是国人创作的独立音乐游戏，这款游戏有两大特色：1.极其华丽的演奏主题场景，包括七彩儿童画、云上轨迹、电子隧道、水墨青花等等风格，而且在音乐的不同阶段，部分场景还会发生一些细微的变化。2.歌曲偏二次元，有不少洛天依和B站UP主的原创曲目~<br>游戏总体难度较低，而且我玩下来发现一些点击判定也不是很严格，很容易拿到不错的分数。官方可能也是感受到了玩家的吐槽？最近增加了INFERNO模式，这个模式下的歌曲还是挺有难度的，仅用双指难以完成，尝试了一下果断被虐到了=。=</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/12.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/13.png" alt=""></p>
<h2 id="7-nbsp-Love-Live！"><a href="#7-nbsp-Love-Live！" class="headerlink" title="7.&nbsp;Love Live！"></a>7.&nbsp;Love Live！</h2><p>这款游戏就不多介绍了，Love Live的粉丝向游戏，喜欢LL的话可以去尝试一下ㄟ( ▔, ▔ )ㄏ</p>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/14.png" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/15.png" alt=""></p>
<h2 id="特别推荐-OSU！"><a href="#特别推荐-OSU！" class="headerlink" title="特别推荐. OSU！"></a>特别推荐. OSU！</h2><p>上面推荐的都是手游，这里补充一个端游：OSU！，OSU有如下特色：</p>
<ul>
<li>支持mac端</li>
<li>支持自定义界面皮肤</li>
<li>海量曲库，推荐去<a href="http://bloodcat.com/osu/?q=&amp;c=b&amp;s=&amp;m=" target="_blank" rel="external">bloodcat镜像站</a>下载Beatmap，比官网快很多</li>
<li><p>四种模式：</p>
<ul>
<li>osu!（osu模式，是osu相比其他音游的一个特色）</li>
<li>Taiko (即太谷达人模式，偶尔玩)</li>
<li>CatchTheBeat (这个模式我还没试过，界面像接水果= =)</li>
<li>osu！mania（传统音游模式，即点击下落的按键，我最常玩的模式）</li>
</ul>
<p>osu有来自全球的玩家，并且有自己的一套社区系统，每月都有新曲发布，玩家也可以自己制谱，不同的难度 X 不同的模式让同一首曲也可以玩出各种花样，支持所有平台，支持自定义皮肤，很棒的一款端游音游</p>
</li>
</ul>
<p>选曲界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/10.jpg" alt=""></p>
<p>打歌界面:<br><img src="http://odck16ake.bkt.clouddn.com/acg_music_game/11.jpg" alt=""></p>
<p>收工~ 不知道上面的音游里有没有你的菜呢？(≧▽≦)</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经有段时间很爱玩音游，从国民级音游节奏大师到雷亚全家桶，正好快过年了比较闲有时间做下盘点，如果你也是音游迷的话也许能发现惊喜呢&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="ACG" scheme="blog.codeest.moe/categories/ACG/"/>
    
    
      <category term="acg" scheme="blog.codeest.moe/tags/acg/"/>
    
      <category term="music" scheme="blog.codeest.moe/tags/music/"/>
    
      <category term="game" scheme="blog.codeest.moe/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup抓取V2EX</title>
    <link href="blog.codeest.moe/2017/01/25/android-jsoup-v2ex/"/>
    <id>blog.codeest.moe/2017/01/25/android-jsoup-v2ex/</id>
    <published>2017-01-24T17:05:41.000Z</published>
    <updated>2017-02-16T18:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></h2><h1 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h1><p>Jsoup是Java的HTML解析器，可以通过类似jQuery的操作方法来解析出DOM结构中你需要的数据，对Android端而言，利用Jsoup可以给大部分网站做第三方客户端。<br>Jsoup最强大的莫过于它的元素选择器了，通过筛选语法可以获取到任意你需要的DOM树中的元素，下面是官方文档中的选择器语法：</p>
<blockquote>
<p>选择器概要（Selector overview）</p>
<ul>
<li>Tagname：通过标签查找元素（例如：a）</li>
<li>ns|tag：通过标签在命名空间查找元素，例如：fb|name查找<fb:name>元素</fb:name></li>
<li>id：通过ID查找元素，例如#logo</li>
<li>.class：通过类型名称查找元素，例如.masthead</li>
<li>[attribute]：带有属性的元素，例如[href]</li>
<li>[^attr]：带有名称前缀的元素，例如[^data-]查找HTML5带有数据集（dataset）属性的元素</li>
<li>[attr=value]：带有属性值的元素，例如[width=500]</li>
<li>[attr^=value]，[attr$=value]，[attr<em>=value]：包含属性且其值以value开头、结尾或包含value的元素，例如[href</em>=/path/]</li>
<li>[attr~=regex]：属性值满足正则表达式的元素，例如img[src~=(?i).(png|jpe?g)]</li>
<li>：所有元素，例如*</li>
</ul>
<p>选择器组合方法</p>
<ul>
<li>el#id:：带有ID的元素ID，例如div#logo</li>
<li>el.class：带类型的元素，例如. div.masthead</li>
<li>el[attr]：包含属性的元素，例如a[href]</li>
<li>任意组合：例如a[href].highlight</li>
<li>ancestor child：继承自某祖（父）元素的子元素，例如.body p查找“body”块下的p元素</li>
<li>parent &gt; child：直接为父元素后代的子元素，例如: div.content &gt; pf查找p元素，body &gt; * 查找body元素的直系子元素</li>
<li>siblingA + siblingB：查找由同级元素A前导的同级元素，例如div.head + div</li>
<li>siblingA ~ siblingX：查找同级元素A前导的同级元素X例如h1 ~ p</li>
<li>el, el, el：多个选择器组合，查找匹配任一选择器的唯一元素，例如div.masthead, div.logo</li>
</ul>
<p>伪选择器（Pseudo selectors）</p>
<ul>
<li>:lt(n)：查找索引值（即DOM树中相对于其父元素的位置）小于n的同级元素，例如td:lt(3)</li>
<li>:gt(n)：查找查找索引值大于n的同级元素，例如div p:gt(2)</li>
<li>:eq(n) ：查找索引值等于n的同级元素，例如form input:eq(1)</li>
<li>:has(seletor)：查找匹配选择器包含元素的元素，例如div:has(p)</li>
<li>:not(selector)：查找不匹配选择器的元素，例如div:not(.logo)</li>
<li>:contains(text)：查找包含给定文本的元素，大小写铭感，例如p:contains(jsoup)</li>
<li>:containsOwn(text)：查找直接包含给定文本的元素</li>
<li>:matches(regex)：查找其文本匹配指定的正则表达式的元素，例如div:matches((?i)login)</li>
<li>:matchesOwn(regex)：查找其自身文本匹配指定的正则表达式的元素<br>注意：上述伪选择器是0-基数的，亦即第一个元素索引值为0，第二个元素index为1等</li>
</ul>
</blockquote>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>今天是主角是我平时经常去逛的<a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX</a><br>首先看V2EX网站某个板块的结构，呈列表状，那么只要能解析其中一个item的结构即可</p>
<p><img src="http://odck16ake.bkt.clouddn.com/android_jsoup_v2ex/0.png" alt=""></p>
<p>找到其中一个item对应的源码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell item"</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"48"</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/member/qile1"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//cdn.v2ex.co/gravatar/03b6474fdca2de3813a9860d19acdaf8?s=48&amp;d=retro"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"default"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"auto"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item_title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/t/336709#reply10"</span>&gt;</span>threading 线程间通信如何控制线程运行及等待。<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sep5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"small fade"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"votes"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"node"</span> <span class="attr">href</span>=<span class="string">"/go/python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &amp;nbsp;•&amp;nbsp; <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/member/qile1"</span>&gt;</span>qile1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &amp;nbsp;•&amp;nbsp; 22 分钟前 &amp;nbsp;•&amp;nbsp; 最后回复来自 <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/member/sheep3"</span>&gt;</span>sheep3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"70"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line">                </div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/t/336709#reply10"</span> <span class="attr">class</span>=<span class="string">"count_livid"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                </div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的代码中可以看出，能获取到的信息有:</p>
<ul>
<li>头像url</li>
<li>发帖者昵称</li>
<li>最后回复时间</li>
<li>最后回复者</li>
<li>帖子所属节点</li>
<li>回帖数</li>
<li>帖子标题</li>
<li>帖子ID</li>
</ul>
<p>定义与之对应的Java Bean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String imgUrl;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String updateTime;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String lastUser;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String node;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> commentNum;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String topicId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，接下来就是通过筛选语法定义HTML DOM -&gt; Java Bean的映射关系了</p>
<p>以解析标题为例子，需要筛选出的目标内容为<code>&lt;a href=&quot;/t/336709#reply10&quot;&gt;threading 线程间通信如何控制线程运行及等待。&lt;/a&gt;</code></p>
<ul>
<li>按照筛选语法的定义，带有class属性的标签可以通过<code>el.class</code>的方式引用，所以最外层的<code>&lt;div class=&quot;cell item&quot; style=&quot;&quot;&gt;</code>即写为<code>div.cell item</code>，但筛选语法规定class中不能出现空格，空格需要由<code>.</code>代替，所以需要改为<code>div.cell.item</code></li>
<li>然后语法规定，继承自某祖（父）元素的子元素可以通过空格的方式获取，那么子元素层层深入，即<code>div.cell.item table tr td</code></li>
<li>最后由title所在的span的class，获取该span，即<code>div.cell.item table tr td span.item_title</code>，取它的直接子元素a标签，即<code>div.cell.item table tr td span.item_title &gt; a</code></li>
</ul>
<p>同理写出其他元素的筛选语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">div.cell.item table tr td span.item_title &gt; a   <span class="comment">//标题</span></div><div class="line">div.cell.item table tr td img.avatar              <span class="comment">//头像</span></div><div class="line">div.cell.item table tr span.small.fade a.node    <span class="comment">//节点</span></div><div class="line">div.cell.item table tr a.count_livid          <span class="comment">//评论数</span></div><div class="line">div.cell.item table tr span.small.fade strong a  <span class="comment">//作者 &amp; 最后回复</span></div><div class="line">div.cell.item table tr span.small.fade           <span class="comment">//更新时间</span></div></pre></td></tr></table></figure></p>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>这里开始，就要利用Jsoup的API来完整真正的解析了：</p>
<ul>
<li><code>Document dom = Jsoup.connect(host_url).timeout(10000).get();</code>,首先获取目标Web页面的整个DOM结构，这里需要传入url地址和连接超时时间，注意这一步由于是网络请求，需要在子线程中执行</li>
<li><code>Elements itemElements = doc.select(&quot;div.cell.item&quot;);</code>根据上面的分析，这一步会从DOM中筛选出所有的目标item，<code>itemElements</code>是这些item的List集合</li>
<li><code>Elements titleElements = itemElements.get(i).select(&quot;div.cell.item table tr td span.item_title &gt; a&quot;);</code>从List中取第i个item，并依照之前的分析，取到包含“标题“信息的a标签</li>
<li><code>String title = titleElements.get(0).attr(&quot;href&quot;)</code>，取该a标签中href属性的值，即标题</li>
<li>如果需要的字段不是标签的属性，而是标签的内容，比如解析帖子节点<code>&lt;a class=&quot;node&quot; href=&quot;/go/python&quot;&gt;Python&lt;/a&gt;</code>，需要获取的是a标签的内容<code>Python</code>，应该调用text方法，<code>String node = nodeElements.get(0).text()</code></li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.在取最后回复者时需要注意，其父标签span下包含两个strong标签<code>&lt;strong&gt;&lt;a href=&quot;/member/qile1&quot;&gt;qile1&lt;/a&gt;&lt;/strong&gt; &amp;nbsp;•&amp;nbsp; 22 分钟前 &amp;nbsp;•&amp;nbsp; 最后回复来自 &lt;strong&gt;&lt;a href=&quot;/member/sheep3&quot;&gt;sheep3&lt;/a&gt;&lt;/strong&gt;</code>,前者是最后回复时间，后者是最后回复者，且两个标签没有id或class等标志，如果按照<code>div.cell.item table tr span.small.fade strong a</code>这种筛选器语法来筛选的话会一次取到两个strong中的a标签，所以仅想获取后者的话需要这样写来<code>nameElements.get(1).text()</code>取第二项</p>
<p>2.在测试时发现解析有时会crash，调查后发现V2EX站点的item结构不是固定的，当帖子无人回复时DOM结构会不同，没有最后回复者、最后回复时间、评论数这三个信息，所以取这三条信息时要记得做额外判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//存在没有 最后回复者、评论数、更新时间的情况</div><div class="line">                            if (nameElements.size() &gt; 1) &#123;</div><div class="line">                                bean.setLastUser(nameElements.get(1).text());</div><div class="line">                            &#125;</div><div class="line">                            if (commentElements.size() &gt; 0) &#123;</div><div class="line">                                bean.setCommentNum(Integer.valueOf(commentElements.get(0).text()));</div><div class="line">                            &#125;</div><div class="line">                            if (timeElements.size() &gt; 1) &#123;</div><div class="line">                                bean.setUpdateTime(parseTime(timeElements.get(1).text()));</div><div class="line">                            &#125;</div></pre></td></tr></table></figure></p>
<h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><p>配合RxJava，最终代码如下，这里也能看到RxJava用起来真的方便、结构清晰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">Observable.just(VtexApis.TAB_HOST + type)</div><div class="line">          .subscribeOn(Schedulers.io())</div><div class="line">          .map(<span class="keyword">new</span> Func1&lt;String, Document&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> Document <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                  <span class="keyword">try</span> &#123;</div><div class="line">                      <span class="keyword">return</span> Jsoup.connect(s).timeout(<span class="number">10000</span>).get();</div><div class="line">                  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                      LogUtil.d(e.toString());</div><div class="line">                      e.printStackTrace();</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">          .filter(<span class="keyword">new</span> Func1&lt;Document, Boolean&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Document document)</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> document != <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">          .map(<span class="keyword">new</span> Func1&lt;Document, List&lt;TopicListBean&gt;&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> List&lt;TopicListBean&gt; <span class="title">call</span><span class="params">(Document doc)</span> </span>&#123;</div><div class="line">                  List&lt;TopicListBean&gt; mList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                  Elements itemElements = doc.select(<span class="string">"div.cell.item"</span>);    <span class="comment">//item根节点</span></div><div class="line">                  <span class="keyword">int</span> count = itemElements.size();</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                      Elements titleElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr td span.item_title &gt; a"</span>);   <span class="comment">//标题</span></div><div class="line">                      Elements imgElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr td img.avatar"</span>);              <span class="comment">//头像</span></div><div class="line">                      Elements nodeElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr span.small.fade a.node"</span>);    <span class="comment">//节点</span></div><div class="line">                      Elements commentElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr a.count_livid"</span>);          <span class="comment">//评论数</span></div><div class="line">                      Elements nameElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr span.small.fade strong a"</span>);  <span class="comment">//作者 &amp; 最后回复</span></div><div class="line">                      Elements timeElements = itemElements.get(i).select(<span class="string">"div.cell.item table tr span.small.fade"</span>);           <span class="comment">//更新时间</span></div><div class="line"></div><div class="line">                      TopicListBean bean = <span class="keyword">new</span> TopicListBean();</div><div class="line"></div><div class="line">                      <span class="keyword">if</span> (titleElements.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                          bean.setTitle(titleElements.get(<span class="number">0</span>).text());</div><div class="line">                          bean.setTopicId(parseId(titleElements.get(<span class="number">0</span>).attr(<span class="string">"href"</span>)));</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (imgElements.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                          bean.setImgUrl(parseImg(imgElements.get(<span class="number">0</span>).attr(<span class="string">"src"</span>)));</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (nodeElements.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                          bean.setNode(nodeElements.get(<span class="number">0</span>).text());</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (nameElements.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                          bean.setName(nameElements.get(<span class="number">0</span>).text());</div><div class="line">                      &#125;</div><div class="line">                      <span class="comment">//存在没有 最后回复者、评论数、更新时间的情况</span></div><div class="line">                      <span class="keyword">if</span> (nameElements.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">                          bean.setLastUser(nameElements.get(<span class="number">1</span>).text());</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (commentElements.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                          bean.setCommentNum(Integer.valueOf(commentElements.get(<span class="number">0</span>).text()));</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (timeElements.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">                          bean.setUpdateTime(parseTime(timeElements.get(<span class="number">1</span>).text()));</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                      mList.add(bean);</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">return</span> mList;</div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">          .observeOn(AndroidSchedulers.mainThread())</div><div class="line">          .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;TopicListBean&gt;&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;TopicListBean&gt; mList)</span> </span>&#123;</div><div class="line">                  mView.showContent(mList);</div><div class="line">              &#125;</div><div class="line">          &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                  mView.showError(<span class="string">"数据加载失败"</span>);</div><div class="line">              &#125;</div><div class="line">          &#125;);</div></pre></td></tr></table></figure>
<p>运行效果<br><img src="http://odck16ake.bkt.clouddn.com/android_jsoup_v2ex/2.png" alt=""><br>项目地址<a href="https://github.com/codeestX/GeekNews" target="_blank" rel="external">GeekNews</a></p>
<p>收工跑路~٩(ˊᗜˋ*)و</p>
<h3 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h3><p><a href="http://www.cnblogs.com/chenying99/archive/2013/01/04/2844615.html" target="_blank" rel="external">使用 jsoup 对 HTML 文档进行解析和操作</a><br><a href="http://blog.csdn.net/atco/article/details/7834489" target="_blank" rel="external">jsoup select 选择器</a></p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间给GeekNews集成V2EX板块，但是无奈官方API提供的很不全面，索性就用Jsoup来解析了&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="blog.codeest.moe/categories/Android/"/>
    
    
      <category term="android" scheme="blog.codeest.moe/tags/android/"/>
    
      <category term="jsoup" scheme="blog.codeest.moe/tags/jsoup/"/>
    
      <category term="v2ex" scheme="blog.codeest.moe/tags/v2ex/"/>
    
  </entry>
  
  <entry>
    <title>2016年终小结</title>
    <link href="blog.codeest.moe/2017/01/01/life-2016/"/>
    <id>blog.codeest.moe/2017/01/01/life-2016/</id>
    <published>2017-01-01T15:32:08.000Z</published>
    <updated>2017-03-17T16:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<p>关于2016年，细想一下还是有不少东西值得记录的，总体来说算是比较充实的一年，就按照学习和生活两方面说吧。</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>“疼痛使人清醒”，只有深刻的感受到了自己有多菜多平庸才会有努力的动力，这句话直白刺耳，但一定也是很多人的切身体会。在2016年年初当我连<code>GridView</code>都无法熟练使用的时候，我才知道自己既有的零碎Android知识已经无法满足开发需要了。是时候拟定计划，系统的开始学习之路了。</p>
<h2 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h2><p>上半年规划用半年时间来巩固基础，而且是系统的、完整的巩固，毕竟无论怎样的开发工作，基础始终是重要的一环，它既是高级技术的根基也是日常开发提升效率的关键。这部分我是通过看书 + 看视频 + 看技术博客来学习的，下面再分别来说：</p>
<h4 id="看书"><a href="#看书" class="headerlink" title="看书"></a>看书</h4><ul>
<li>《Thinking in Java》，即Java编程思想，厚厚的一本，但没有冗余，每章节的内容都很有价值，算是一本介于Java基础与进阶之间的书，看到很多人说过这本书每次看完一遍的感受都不一样，17年打算再看一遍</li>
<li>《Effective Java》，只有200多页的一本书，因为整本书都是Java方面的干货，这本书不是教如何写代码的，而是教如何写出更优雅的代码，很实用的一本Java进阶书</li>
<li>《Android开发艺术探索》，CSDN博主任玉刚（主席）写的一本Android进阶书，知识点覆盖比较全面，附带部分源码，不错的一本书，抽时间准备再来一遍</li>
<li>《Android群英转》，CSDN博主徐宜生（医生）写的一本Android进阶书，感觉比艺术探索稍简单一些，读完也是很有收获</li>
<li>《Android源码设计模式解析与实战》，非常好的一本书，作者算是手把手教你实践设计模式了，而且还例举出了设计模式在Android源码中的应用，源码和设计模式一起学习了</li>
</ul>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>晚上看视频挺容易瞌睡的，所以有一定基础的情况下不太推荐花太多时间看视频，相比较看书和撸码这是一种比较被动的学习方式，只找自己感兴趣的视频看就好。对比过慕课网、极客学院、网易云公开课以后我选择了慕课网，大部分视频都是我比较感兴趣的，而且上面有很多Android界熟悉的面孔，比如Hyman鸿洋，这些CSDN博主常年写博客，能把技术内容表达的更易于理解。今天去慕课网看了下，累计学习时间50小时，不长不短吧…</p>
<h4 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h4><p>这块没什么好说的了，不少知名Android博主写的博文都很不错，鸿洋，郭霖，任玉刚，徐宜生，夏秋明，老罗，stormzhang等等，和视频一样，找自己感兴趣或者欠缺的知识点看。</p>
<h2 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h2><p>下半年是时候表演真正的技术了，把学到的知识亲手实践一遍才算真正的到碗里来，所以这半年时间一开始就拟定了去写一些开源项目以及掌握Android端的热门技术框架:  </p>
<ul>
<li>RxJava</li>
<li>Retrofit</li>
<li>Dagger2</li>
<li>Realm</li>
<li>DataBinding</li>
<li>Kotlin</li>
<li>MVP架构</li>
<li>MVVM架构</li>
</ul>
<p>8月份开始断断续续写了阅读应用GeekNews，实践了一部分上面的技术栈，9月收工准备发布到简书和掘金，这算是我第一次把项目公开到技术社区，为了不被Android Dalao花式打脸(￣ε(#￣)☆╰╮(￣▽￣///)期间写的也是比较用心，发布一个月后收到了超过1000的star，这也是一开始根本没有想到的，非常激动，也让我这个懒癌晚期感受到了作为生产者的好：</p>
<ul>
<li>1.自己完成规划的技术实践 </li>
<li>2.帮助别人，结识更多素不相识的人，互相交流，指出不足，共同进步 </li>
<li>3.自己也能获得一丝成就感</li>
</ul>
<p>10月份发现自己对前端越发感兴趣，看到别人能搭建出好看的Web页面很羡慕，于是过了一遍HTML/CSS/JavaScript/Node的基础教程，在平时用来科学上网的服务器上用node &amp; koa2搭了GeekNews检测更新用的API，在github pages上用Hexo &amp; Themia搭了自己的站点，并做了一点微小的工作（<del>魔改</del>）  </p>
<p>11月份逛dribbble时看到动效控件找到了灵感，过了一遍GcsSloop的Canvas系列教程巩固了一遍custom view相关的知识，花一周时间以及一张草稿纸写出了ENViews，发布一周后收到了1000+star以及android-arsenal，material UP的推荐邮件，还有Tesla OS组织的邀请，愈发让我感受到了开源的动力与魅力，也让我知道了和别人产生交流远比活在一个人的世界里更好</p>
<p>12月份在维护GeekNews的新版本和规划2017年的计划，一开始写这个App的目的主要是为了把它作为新技术的实践载体，现在打算把它做得更具有一定的使用价值，做好一个面向程序员/极客的纯粹的阅读器，陆续加上了自己喜欢的掘金和V2EX板块，现在GeekNews已经有5个板块了，新闻、技术、福利、创意社区具在，希望大家能喜欢</p>
<p>未来几年自己想深入学习的技术领域有：Android(移动端) + React(前端) + Node(后端)，重点还是放在深入Android上（这个可是拿来吃饭的！），目前自己对Android底层原理和一些框架源码的掌握还远远不够。在这一年的学习过程中也发现了很多Android大牛和厉害的开源项目，清楚的感受到了自己和他们仍然有很大的差距，要一直保持谦虚努力的心态才行，业余时间准备继续学习JavaScript（算是兴趣爱好，这也的确是一门很实用的语言），最后记录下2016年的Ranking图，希望17年能继续产出好的开源项目，也希望能由此结识更多人</p>
<p><img src="http://odck16ake.bkt.clouddn.com/life_2016_1.png" alt=""></p>
<p>嗯，最后定下2017年的计划<del>（立Flag）</del></p>
<ul>
<li>多读一些Android Framework层源码，还有Github上主流Android框架的源码，谨记Linus的教诲RTFSC（Read the fucking source code）（逃</li>
<li>坚持写开源项目和文章，也要尽力保证产出的质量</li>
<li>进一步学习JavaScript和前端</li>
</ul>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>生活上依然过着很宅的日子，每天看一集动漫就可以满足的那种(￣ˇ￣)</p>
<p>和小伙伴们去逛了一些展，3场Comicup，1场ChinaJoy，1场Bilibili Macro Link，都很热闹，买到一些小宅物也很开心  </p>
<p>游戏方面基本在玩手游和音游，端游、moba都已经没什么兴趣了，上半年主要在玩百万氪金王，后来立绘被焚化局通告和谐了，实在不能忍，把这个玩了一年的游戏给弃了，也不用氪金了╮(╯▽╰)╭。国庆玩了一周阴阳师，刚开始觉得挺好玩的，很有特色的一款游戏，后来觉得太肝，后期重复性略大，也弃之。下半年偶尔和小伙伴们一起玩玩守望先锋，不错的游戏，暴雪出品，必属精品。</p>
<p>16年没怎么出门，只去了杭州、厦门，还有上海周边的一些小地方，周末看看电影看看书追追番，很喜欢《君名》，刷了两遍。17年如果有机会的话，国内想去成都/重庆旅游，国外想去日本旅游，不知道有没有机会实现心愿呢</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后共勉两句话：</p>
<ul>
<li>一句是Android大神郭霖说过的：<b>每当你在感叹，如果有这样一个东西就好了的时候，请注意，其实这是你的机会</b></li>
<li>一句是简书CEO简叔说过的：<b>你一定要努力，但千万别着急</b></li>
</ul>
<p><b>好吧就扯这么多了，再见2016，加油2017！</b></p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi, 2017  Bey, 2016&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="blog.codeest.moe/categories/Life/"/>
    
    
      <category term="life" scheme="blog.codeest.moe/tags/life/"/>
    
      <category term="summary" scheme="blog.codeest.moe/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>《你的名字。》</title>
    <link href="blog.codeest.moe/2016/12/04/acg-yourname/"/>
    <id>blog.codeest.moe/2016/12/04/acg-yourname/</id>
    <published>2016-12-04T15:32:23.000Z</published>
    <updated>2017-02-16T18:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<embed width="850" height="706" align="center" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=7380766&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">

<div class="figure fig-100" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58991926.jpg" alt=""></div>
<div class="figure fig-50" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58731987.jpg" alt=""></div>
<div class="figure fig-50" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58851378.jpg" alt=""></div>
<div class="figure fig-100" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=59240220.jpg" alt=""></div>
<div class="figure fig-50" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58750676.jpg" alt=""></div>
<div class="figure fig-50" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58916524.jpg" alt=""></div>
<div class="figure fig-100" style="width:;"><img class="fig-img" src="http://odck16ake.bkt.clouddn.com/yourname/id=58898400.png" alt=""></div>
<p>PIXIV ID: 59214087、58991926、58731987、58851378、59240220、58750676、58916524、58898400</p>
<p>感谢诚哥带来的这部的触动人心的作品，票房实至名归，电影结束后全场不约而同的响起了掌声，这种贴近生活却又高于生活的故事真的可以带来难以磨灭的印象。</p>
<p>每一帧都可以截做壁纸的风景，插入时机合适的BGM，奇幻却又逻辑严谨的整体情节，表现力充分的分镜与CV，两个小时不知不觉间沉浸其中。</p>
<p>前半段伴随着许多笑点，后半段逐渐揭开伏笔，带来的与其说是泪点，不如说是一次又一次很直接的心灵的震颤。</p>
<ul>
<li><p>“喜欢你” “笨蛋，这几个字，我怎么知道你的名字啊”</p>
</li>
<li><p>只要记住你的名字，不管你在世界的哪个地方，我一定会再去见你。</p>
</li>
<li><p>重要的人，不能忘记的人，不想忘记的人。 你，是谁？</p>
</li>
</ul>
<p><b>所有的相遇，都是久别的重逢</b></p>
<p>————-华丽的分割线————–</p>
<p>2016-12-15 达成成就：二刷 (๑＞ڡ＜)☆</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有的相遇，都是久别的重逢&lt;br&gt;
    
    </summary>
    
      <category term="ACG" scheme="blog.codeest.moe/categories/ACG/"/>
    
    
      <category term="acg" scheme="blog.codeest.moe/tags/acg/"/>
    
      <category term="movie" scheme="blog.codeest.moe/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>折腾博客</title>
    <link href="blog.codeest.moe/2016/11/23/web-hexo/"/>
    <id>blog.codeest.moe/2016/11/23/web-hexo/</id>
    <published>2016-11-22T17:02:27.000Z</published>
    <updated>2017-02-17T18:14:05.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h1 id="选择博客框架"><a href="#选择博客框架" class="headerlink" title="选择博客框架"></a>选择博客框架</h1><p>现在主流的博客框架有hexo, jeklly, WordPress三款，其中WordPress应该算是功能最强大的，自带MySQL数据库，数量众多的插件和主题，支持自定义各种侧边小控件，还有一个图形化界面管理后台，但是不像前两者可以方便的搭在GithubPages上，需要自己买台服务器提供空间，而且对markdown的支持貌似也不如前两者好。至于hexo和jeklly在特点上几乎没什么区别，只是一个基于nodejs一个基于ruby，都很轻量级，性能好速度快，近年来很火。</p>
<p>在分别尝试了用<a href="https://github.com/DIYgod/Amativeness" target="_blank" rel="external">Amativeness</a>主题配合WordPress建站和用<a href="https://github.com/kaedea/hexo-theme-themia" target="_blank" rel="external">Themia</a>主题配合Hexo建站后最后还是选择了后者，搭建完成发现还少了不少东西，需要继续折腾。</p>
<h1 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h1><p><a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>是国内知名的网站第三方评论系统，Themia基于的tranquilpeak主题中已经集成了多说，直接把申请到的key填入就可以生效了。但是没有做任何处理的默认的主题样式很一般…而且和Themia的风格也不怎么搭，不折腾一下能忍咩？好在多说支持自定义css属性，那就好办了，这里是<a href="http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017" target="_blank" rel="external">自定义样式文档</a></p>
<p>直接分享下我的评论栏的css代码吧</p>
<ul>
<li><code>圆形头像与鼠标悬浮旋转</code>  </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#ds-reset .ds-avatar img &#123;</div><div class="line">    width:54px;height:54px;</div><div class="line">    margin-right: 12px;</div><div class="line">    border-radius: 27px;</div><div class="line">    -webkit-border-radius: 27px;    </div><div class="line">    -moz-border-radius:27px;</div><div class="line">    box-shadow: inset 0 -1px 0 #3333sf;</div><div class="line">    -webkit-box-shadow: inset 0 -1px 0 #3333sf;</div><div class="line">    -webkit-transition: 0.4s;   </div><div class="line">    -webkit-transition: -webkit-transform 0.4s ease-out;</div><div class="line">    transition: transform 0.4s ease-out;</div><div class="line">    -moz-transition: -moz-transform 0.4s ease-out;&#125;</div><div class="line"></div><div class="line">#ds-reset .ds-avatar img:hover&#123;    </div><div class="line">box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1);</div><div class="line">    -webkit-box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1);</div><div class="line">    transform: rotateZ(360deg);</div><div class="line">    -webkit-transform: rotateZ(360deg);</div><div class="line">    -moz-transform: rotateZ(360deg);&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>右侧的背景图片 url地址换成你的外链图片</code>  </li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> <span class="selector-tag">textarea</span> &#123;<span class="attribute">background</span>:<span class="built_in">url</span>(http://odck16ake.bkt.clouddn.com/duoshuo.png) no-repeat right bottom <span class="meta">!important</span>; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>边框和按钮变圆角，设置背景色</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> &#123;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">0px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#F4F6F7</span>;&#125;</div><div class="line">	</div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-options</span> &#123;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span>;&#125;</div></pre></td></tr></table></figure>
<p>把上面的代码直接粘贴到多说后台自定义css中保存即可。到这里还没有结束，接下来还要给评论加上操作系统和浏览器信息，继续：</p>
<ul>
<li><code>添加样式</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-class">.this_ua</span> &#123;<span class="attribute">background-color</span>: <span class="number">#ccc</span><span class="meta">!important</span>;<span class="attribute">border-radius</span>: <span class="number">4px</span>;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span><span class="meta">!important</span>;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span><span class="meta">!important</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#BBB</span><span class="meta">!important</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Windows</span>&#123;<span class="attribute">background-color</span>: <span class="number">#39b3d7</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#46b8da</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Linux</span> &#123;<span class="attribute">background-color</span>: <span class="number">#3A3A3A</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#1F1F1F</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.platform</span><span class="selector-class">.Android</span> &#123;<span class="attribute">background-color</span>: <span class="number">#00C47D</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#01B171</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Chrome</span>&#123;<span class="attribute">background-color</span>: <span class="number">#5cb85c</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#4cae4c</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Firefox</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f0ad4e</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#eea236</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.IE</span>&#123;<span class="attribute">background-color</span>: <span class="number">#428bca</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#357ebd</span><span class="meta">!important</span>;&#125;</div><div class="line"><span class="selector-class">.this_ua</span><span class="selector-class">.browser</span><span class="selector-class">.Opera</span>&#123;<span class="attribute">background-color</span>: <span class="number">#d9534f</span><span class="meta">!important</span>;<span class="attribute">border-color</span>: <span class="number">#d43f3a</span><span class="meta">!important</span>;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>找到你的博客中的多说js代码，在后面紧接着添加引用ua-parser.js的部分</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            <span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">'codeest'</span>&#125;;</div><div class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">                ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">                ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">                ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">                (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</div><div class="line">                || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">                ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">                ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">                ds.src = <span class="string">'http://faisalman.github.io/ua-parser-js/src/ua-parser.js'</span>;</div><div class="line">                ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">      (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">            &#125;)();</div><div class="line">        <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><code>在上面这段代码下面再紧接着添加下面这段</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> DUOSHUO !== <span class="string">'undefined'</span>)hookDUOSHUO_tp();</div><div class="line">            <span class="keyword">else</span> $(<span class="string">'[src="http://static.duoshuo.com/embed.js"]'</span>)[<span class="number">0</span>].onload=hookDUOSHUO_tp;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">hookDUOSHUO_tp</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> _D_post=DUOSHUO.templates.post</div><div class="line">                DUOSHUO.templates.post=<span class="function"><span class="keyword">function</span> (<span class="params">e,t</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> rs=_D_post(e,t);</div><div class="line">                    <span class="keyword">if</span>(e.post.agent&amp;&amp;<span class="regexp">/^Mozilla/</span>.test(e.post.agent))</div><div class="line">                        rs=rs.replace(<span class="regexp">/&lt;\/div&gt;&lt;p&gt;/</span>,show_ua(e.post.agent)+<span class="string">'&lt;/div&gt;&lt;p&gt;'</span>);</div><div class="line">                    <span class="keyword">return</span> rs;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">show_ua</span>(<span class="params">string</span>)</span>&#123;</div><div class="line">                $.ua.set(string);</div><div class="line">                <span class="keyword">var</span> sua=$.ua;</div><div class="line">                <span class="keyword">if</span>(sua.os.version==<span class="string">'x86_64'</span>)sua.os.version=<span class="string">'x64'</span>;</div><div class="line">                <span class="keyword">return</span> <span class="string">'&lt;span class="this_ua browser '</span>+sua.browser.name+<span class="string">'"&gt;'</span>+sua.browser.name+<span class="string">' | '</span>+sua.browser.version+<span class="string">'&lt;/span&gt;'</span>+<span class="string">'&lt;span class="this_ua platform '</span>+sua.os.name+<span class="string">'"&gt;'</span>+sua.os.name+<span class="string">' '</span>+sua.os.version+<span class="string">'&lt;/span&gt;'</span>;</div><div class="line">            &#125;</div><div class="line">        &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>PS: 这里我又喜闻乐见的踩到坑了。。网上大部分的介绍在上面的代码中使用的都是<code>e.agent</code>，但是根据最新版的多说embed.js中的定义应该使用<code>e.post.agent</code>，修改完后总算看到效果了<br><img src="http://odck16ake.bkt.clouddn.com/web_hexo_0.png" alt=""></p>
<p>多说收工٩(ˊᗜˋ*)و</p>
<h1 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h1><p><a href="http://service.ibruce.info/" target="_blank" rel="external">不蒜子</a>是极简的网页计数器，用起来真的是低碳绿色环保，两句代码就能集成，帮助统计网站的访问量。官网上也写明了使用方法，我这里提下要点。</p>
<ul>
<li><code>首先在博客的script文件中加入这段脚本</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<ul>
<li><code>然后在网站的bottom中插入总访问量PV和总访客数UV</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;</div><div class="line">    本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次</div><div class="line">&lt;<span class="regexp">/span&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=<span class="string">"busuanzi_container_site_uv"</span>&gt;</div><div class="line">  本站访客数&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>人次</div><div class="line">&lt;<span class="regexp">/span&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>最后在每篇文章中加入单页访问量PV</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=<span class="string">"busuanzi_container_page_pv"</span>&gt;</div><div class="line">  本文总阅读量&lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次</div><div class="line">&lt;<span class="regexp">/span&gt;</span></div></pre></td></tr></table></figure>
<p>PS：我一开始手滑把单页PV用成了全站PV，还给不蒜子作者发邮件询问为什么统计量不对呢。。捂脸 &gt;///&lt;<br><img src="http://odck16ake.bkt.clouddn.com/web_hexo_1.png" alt=""></p>
<p>不蒜子收工٩(ˊᗜˋ*)و</p>
<h1 id="捐赠"><a href="#捐赠" class="headerlink" title="捐赠"></a>捐赠</h1><p>好吧。。这个破站现在并没有什么值得各路dalao打赏的干货，不过梦想还是要有的，万一有路过的好心人投了一颗糖或者送了一杯速溶咖啡呢，直接上代码吧。</p>
<ul>
<li><code>添加样式</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.donate_bar</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">width</span>: auto;</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">letter-spacing</span>: .<span class="number">01em</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#9eabb3</span><span class="meta">!important</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#9eabb3</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">15px</span>;</div><div class="line">    <span class="attribute">-webkit-transition</span>: background <span class="number">0s</span>;</div><div class="line">    <span class="attribute">-moz-transition</span>: background <span class="number">0s</span>;</div><div class="line">    <span class="attribute">-o-transition</span>: background <span class="number">0s</span>;</div><div class="line">    <span class="attribute">-ms-transition</span>: background <span class="number">0s</span>;</div><div class="line">    <span class="attribute">transition</span>: background <span class="number">0s</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span>&#123;</div><div class="line">    <span class="attribute">display</span>: none</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.post-donate</span>&#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#donate_guide</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">210px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">420px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>代码部分，放到文章评论区上方即可</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span> </span>=<span class="string">"post-donate"</span>&gt;</div><div class="line">    &lt;div id="donate_board" class="donate_bar center"&gt;</div><div class="line">        &lt;a id="btn_donate" class="btn_donate" href="javascript:;" title="打赏"&gt;给作者投食戳这里OwO&lt;/a&gt;</div><div class="line">        &lt;br&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div id="donate_guide" class="donate_bar center hidden" &gt;</div><div class="line">        &lt;!-- 支付宝打赏图案 --&gt;</div><div class="line">        &lt;img src="http://odck16ake.bkt.clouddn.com/qr_alipay.png" alt="支付宝打赏"&gt;</div><div class="line">        &lt;!-- 微信打赏图案 --&gt;</div><div class="line">        &lt;img src="http://odck16ake.bkt.clouddn.com/qr_wechat.png" alt="微信打赏"&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">        document.getElementById('btn_donate').onclick = function()&#123;</div><div class="line">            $('#donate_board').addClass('hidden');</div><div class="line">            $('#donate_guide').removeClass('hidden');</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>PS：上面的打赏按钮样式是根据Themia按钮风格来的，可以根据自己的博客风格微调，记得把代码中的支付宝和微信图案换成自己的，不然钱打到我的账户我可不管╮(￣▽￣)╭<br><img src="http://odck16ake.bkt.clouddn.com/web_hexo_2.png" alt=""><br>捐赠收工٩(ˊᗜˋ*)و</p>
<h1 id="性能与SEO优化"><a href="#性能与SEO优化" class="headerlink" title="性能与SEO优化"></a>性能与SEO优化</h1><p>性能关乎博客页面加载速度，SEO关乎搜索排名的前后，有余力的就把这块也一起折腾了吧，这方面内容比较多，而且已经有一些不错的文章介绍了这方面的内容，我就直接甩自己看过的文章链接了<br>性能: <a href="https://yq.aliyun.com/articles/8608" target="_blank" rel="external">Hexo折腾记——性能优化篇</a><br>SEO: <a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="external">Hexo Seo优化让你的博客在google搜索排名第一</a></p>
<h1 id="集成APlayer"><a href="#集成APlayer" class="headerlink" title="集成APlayer"></a>集成APlayer</h1><p><a href="https://github.com/DIYgod/APlayer" target="_blank" rel="external">APlayer</a>是前端小鲜肉<del>(大神)</del>DIYgod开发的一款开源HTML5播放器，功能丰富，UI简洁美观，是代替原生HTML5播放器的不二选择！但是直接使用需要传入封面url，音频url，歌词文件等一系列参数，配置下来比较麻烦<br>这时就需要配合<a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="external">163music-APlayer-you-get-docker</a>这款根据id自动解析网易云音乐资源并加载到APlayer的音乐接口来使用了，<code>163music-APlayer-you-get-docker</code>已经做了充足的封装，只需要使用<code>Hexo</code>的<code>iframe</code>标签调用接口地址即可引入APlayer到博客中，下面是示例：</p>
<h3 id="插入单曲"><a href="#插入单曲" class="headerlink" title="插入单曲"></a>插入单曲</h3><iframe src="https://music.daoapp.io/iframe?song=36990266&qssl=1&autoplay=0&max_width=100%" width="100%" height="100" frameborder="0" allowfullscreen></iframe>
<p>对应模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe https://music.daoapp.io/iframe?song=36990266&amp;qssl=1&amp;autoplay=0&amp;max_width=100% 100% 100 %&#125;</div></pre></td></tr></table></figure></p>
<iframe src="https://music.daoapp.io/iframe?song=40729947&qssl=1&autoplay=0&max_width=100%" width="100%" height="100" frameborder="0" allowfullscreen></iframe>
<p>对应模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe https://music.daoapp.io/iframe?song=40729947&amp;qssl=1&amp;autoplay=0&amp;max_width=100% 100% 100 %&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入歌单"><a href="#插入歌单" class="headerlink" title="插入歌单"></a>插入歌单</h3><iframe src="https://music.daoapp.io/iframe?playlist=37288058&qssl=1&autoplay=0&max_width=100%" width="100%" height="300" frameborder="0" allowfullscreen></iframe>
<p>对应模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe https://music.daoapp.io/iframe?playlist=37288058&amp;qssl=1&amp;autoplay=0&amp;max_width=100% %&#125;</div></pre></td></tr></table></figure></p>
<h1 id="HTTPS化"><a href="#HTTPS化" class="headerlink" title="HTTPS化"></a>HTTPS化</h1><p>这个属于TODO，先占个坑</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>Themia</code>即<code>tranquilpeak</code>自带的内联代码和代码块样式总是感觉不太满意，灰色的底图和博客背景几乎一致，字体颜色也是，完全起不到突出作用，所以参考另一款我比较喜欢的博客样式<a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">even</a>做了调整，给代码块加了淡黄色的护眼底色，把内联代码的字色改为了红色以表突出，<code>像这样</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"像这样"</span>;</div></pre></td></tr></table></figure></p>
<p>除此之外，在Themia的基础上还加了底部图片Banner，blog age计时，侧边栏样式优化，都是一些html/css/js的修改，没什么好说的了，很羡慕那些前端工程师们可以把自己的博客打点的很漂亮，Android党鸭梨山大(/ω＼)，以后前端知识精进了再继续折腾，到此结束~</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间把博客大致折腾成了自己喜欢的样子，在这记录下吧，网上关于如何搭建博客的文章已经有很多了，所以这篇文章重点要说的是博客建成之后又做了哪些事&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="blog.codeest.moe/categories/Web/"/>
    
    
      <category term="web" scheme="blog.codeest.moe/tags/web/"/>
    
      <category term="hexo" scheme="blog.codeest.moe/tags/hexo/"/>
    
      <category term="blog" scheme="blog.codeest.moe/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>那些用了根本停不下来的插件</title>
    <link href="blog.codeest.moe/2016/09/25/tools-plugin/"/>
    <id>blog.codeest.moe/2016/09/25/tools-plugin/</id>
    <published>2016-09-25T09:45:57.000Z</published>
    <updated>2017-02-16T18:27:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h1 id="Chrome篇"><a href="#Chrome篇" class="headerlink" title="Chrome篇"></a>Chrome篇</h1><p>先放图，20款我正在用的Chrome插件，访问插件商店前记得科学上网！<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_00.png" alt=""></p>
<h3 id="1-Vimium"><a href="#1-Vimium" class="headerlink" title="1. Vimium"></a>1. <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN" target="_blank" rel="external">Vimium</a></h3><p>支持全键盘操作Chrome，浓浓的极客风，习惯了键盘快捷键后可以更高效的操作Chrome</p>
<h3 id="2-Momentum"><a href="#2-Momentum" class="headerlink" title="2. Momentum"></a>2. <a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=zh-CN" target="_blank" rel="external">Momentum</a></h3><p>New Tab页面，每天一张精美的风景图，一句鸡汤，右下角还支持编辑记录TODO事件，非常简洁精致，让你的New Tab颜值爆炸<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_4.png" alt=""></p>
<h3 id="3-JSONView"><a href="#3-JSONView" class="headerlink" title="3. JSONView"></a>3. <a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=zh-CN" target="_blank" rel="external">JSONView</a></h3><p>自动格式化页面上的Json结构体，让接口返回的结果一目了然，非常适合调试API的时候使用</p>
<h3 id="4-Adblock-Plus"><a href="#4-Adblock-Plus" class="headerlink" title="4. Adblock Plus"></a>4. <a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="external">Adblock Plus</a></h3><p>这个可以算人人必备级别的插件了，高效屏蔽广告，baidu推广也可以屏蔽，真是打开了新世界的大门</p>
<h3 id="5-qiniu-upload-files"><a href="#5-qiniu-upload-files" class="headerlink" title="5. qiniu upload files"></a>5. <a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc?hl=zh-CN" target="_blank" rel="external">qiniu upload files</a></h3><p>七牛图床，在七牛官网上申请好账户，在这个插件中配置申请到的key等信息，就可以直接拖图片进去立刻生成图片外链，方便在写作的时候插入图片,账户初始应该有50G的免费空间</p>
<h3 id="6-OneTab"><a href="#6-OneTab" class="headerlink" title="6. OneTab"></a>6. <a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?hl=zh-CN" target="_blank" rel="external">OneTab</a></h3><p>你一定遇到过这样的情景，Chrome中开了很多Tab页，导致占用的内存很高，但是每个页面都很有用，又舍不去关，那么就可以用OneTab来管理，把当前所有Tab页都回收到一个Tab里，需要的时候再还原</p>
<h3 id="7-Isometric-Contributions"><a href="#7-Isometric-Contributions" class="headerlink" title="7. Isometric Contributions"></a>7. <a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien?hl=zh-CN" target="_blank" rel="external">Isometric Contributions</a></h3><p>可以将你在github上面的提交记录变得3D立体化的一个插件，用处不算大，可以玩玩</p>
<h3 id="8-Avatars-for-Github"><a href="#8-Avatars-for-Github" class="headerlink" title="8. Avatars for Github"></a>8. <a href="https://chrome.google.com/webstore/detail/avatars-for-github/pgjmdbklnfklcjfbonjfkdhaonlfogbb?hl=zh-CN" target="_blank" rel="external">Avatars for Github</a></h3><p>在github的首页 News页面上默认只显示昵称，这个插件可以让头像也显示出来，更容易分清是谁在”程序员最大的同性交友网站”上和你有了交互<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_5.png" alt=""></p>
<h3 id="9-Octotree"><a href="#9-Octotree" class="headerlink" title="9. Octotree"></a>9. <a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN" target="_blank" rel="external">Octotree</a></h3><p>算是最实用的一个github插件了，在一个项目页面的左侧可以打开该项目的树状结构图，可以方便的直达某一个文件，再也不用一层一层点进去了<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_6.png" alt=""></p>
<h3 id="10-ADB-Plugin"><a href="#10-ADB-Plugin" class="headerlink" title="10. ADB Plugin"></a>10. <a href="https://chrome.google.com/webstore/detail/adb/dpngiggdglpdnjdoaefidgiigpemgage?hl=zh-CN" target="_blank" rel="external">ADB Plugin</a></h3><p>支持在浏览器上连接手机，进行adb操作，方便Android开发调试</p>
<h3 id="11-Search-by-Image"><a href="#11-Search-by-Image" class="headerlink" title="11. Search by Image"></a>11. <a href="https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm?hl=zh-CN" target="_blank" rel="external">Search by Image</a></h3><p>Google官方插件，对图片右键选择“Search Google with Image”，直接使用Google的以图搜图功能，需要科学上网</p>
<h3 id="12-The-QR-Code-Extension"><a href="#12-The-QR-Code-Extension" class="headerlink" title="12. The QR Code Extension"></a>12. <a href="https://chrome.google.com/webstore/detail/the-qr-code-extension/oijdcdmnjjgnnhgljmhkjlablaejfeeb?hl=zh-CN" target="_blank" rel="external">The QR Code Extension</a></h3><p>直接生成当前页面的二维码</p>
<h3 id="13-Octo-Mate"><a href="#13-Octo-Mate" class="headerlink" title="13. Octo Mate"></a>13. <a href="https://chrome.google.com/webstore/detail/octo-mate/baggcehellihkglakjnmnhpnjmkbmpkf" target="_blank" rel="external">Octo Mate</a></h3><p>一款多功能的github插件，能够在项目主页显示项目的大小，在屏幕右侧列出README大纲，点击单个文件的图标还能下载单个文件，都是实用功能</p>
<h3 id="14-GitHub-Awesome-Autocomplete"><a href="#14-GitHub-Awesome-Autocomplete" class="headerlink" title="14. GitHub Awesome Autocomplete"></a>14. <a href="https://chrome.google.com/webstore/detail/github-awesome-autocomple/djkfdjpoelphhdclfjhnffmnlnoknfnd?hl=zh-CN" target="_blank" rel="external">GitHub Awesome Autocomplete</a></h3><p>由Algolia搜索提供的github搜索栏扩展插件，在搜索栏里输入内容的同时就会显示部分搜索结果，比原本的搜索模式方便的多<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_10.png" alt=""></p>
<h3 id="15-Custom-Google™-Background"><a href="#15-Custom-Google™-Background" class="headerlink" title="15. Custom Google™ Background"></a>15. <a href="https://chrome.google.com/webstore/detail/custom-google-background/jepibmfmhopgkplegmkjgifmhabbjadg?hl=zh-CN" target="_blank" rel="external">Custom Google™ Background</a></h3><p>支持自定义Google搜索主页的背景和小控件的显示，可以换上自己喜欢的壁纸，把用不到的小控件隐去<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_8.png" alt=""></p>
<h3 id="16-划词翻译"><a href="#16-划词翻译" class="headerlink" title="16. 划词翻译"></a>16. <a href="https://chrome.google.com/webstore/search/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91?hl=zh-CN" target="_blank" rel="external">划词翻译</a></h3><p>可以直接翻译鼠标滑动选中的内容，我设置成了按住ctrl/command时翻译，MacBook支持三指触控翻译可以不用这个插件，Windows下还算好用</p>
<h3 id="17-Tampermonkey"><a href="#17-Tampermonkey" class="headerlink" title="17. Tampermonkey"></a>17. <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="external">Tampermonkey</a></h3><p>这款扩展插件就比较神奇了，浏览器脚本管理工具，可以开关、添删、编辑脚本。脚本和扩展插件不同，功能丰富强大的脚本也是比比皆是，比如屏蔽百度网盘下载限制，屏蔽主流视频网站片头广告，优化一些页面显示效果，还有一些老司机开车脚本…咳咳，各种脚本可以去<a href="https://greasyfork.org/zh-CN" target="_blank" rel="external">greasyfork.org</a>下载，配合这个插件使用</p>
<h3 id="18-LastPass"><a href="#18-LastPass" class="headerlink" title="18. LastPass"></a>18. <a href="https://chrome.google.com/webstore/search/LastPass?hl=zh-CN" target="_blank" rel="external">LastPass</a></h3><p>现在各种网站都要求注册，LastPass就是管理记录各个站点密码的，可以一键添加，换浏览器了也可以同步记录，好记性不如烂笔头</p>
<h3 id="19-Checker-Plus-for-Gmail"><a href="#19-Checker-Plus-for-Gmail" class="headerlink" title="19. Checker Plus for Gmail"></a>19. <a href="https://chrome.google.com/webstore/search/checker%20plus%20for%20gmail?hl=zh-CN" target="_blank" rel="external">Checker Plus for Gmail</a></h3><p>Gmail作为主力邮箱的赶紧装上吧，邮件来了第一时间弹窗提醒，点开插件图标可以快速查看邮件，还支持对邮件做各种操作<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_9.png" alt=""></p>
<h3 id="20-Postman"><a href="#20-Postman" class="headerlink" title="20. Postman"></a>20. <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=zh-CN" target="_blank" rel="external">Postman</a></h3><p>我们平时可以在浏览器上直接测试<code>GET</code>型接口，但是对于<code>POST</code>,<code>DELETE</code>这些需要附带表单或是附带头部信息的接口就不方便调试了，Postman就满足任意类型的接口调试，可以添加各种信息来模拟接口访问，麻麻再也不用担心调接口了&gt; &lt;<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_7.png" alt=""></p>
<h1 id="Android-Studio篇"><a href="#Android-Studio篇" class="headerlink" title="Android Studio篇"></a>Android Studio篇</h1><p>Android Studio实用插件挺多的，我只用了最需要的3款</p>
<h3 id="1-GsonFormat"><a href="#1-GsonFormat" class="headerlink" title="1. GsonFormat"></a>1. GsonFormat</h3><p>可以将一串Json直接转化成对应的实体类，在类中右键Generate…-&gt;GsonFormat,将Json粘贴到窗口中，点击确定就会生成实体类的代码，懒人必备<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_1.png" alt=""></p>
<h3 id="2-ButterKnife-Zelezny"><a href="#2-ButterKnife-Zelezny" class="headerlink" title="2. ButterKnife Zelezny"></a>2. ButterKnife Zelezny</h3><p>可以根据xml中定义好的控件生成butter knife的控件注入代码，在<code>R.layout.xxx</code>上右键Generate…-&gt;Generate Butterknife Injections,点击确定生成代码，懒人必备<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_2.png" alt=""></p>
<h3 id="3-Sexy-Editor"><a href="#3-Sexy-Editor" class="headerlink" title="3. Sexy Editor"></a>3. Sexy Editor</h3><p>可以给代码编辑区设置背景，这个要看个人爱好了，Preferences -&gt; Other Settings -&gt; SexyEditor 在File list中放入图片路径即可<br><img src="http://odck16ake.bkt.clouddn.com/tools_plugin_3.png" alt=""><br>背景是E.M.T!</p>
<h1 id="Sublime-Text篇"><a href="#Sublime-Text篇" class="headerlink" title="Sublime Text篇"></a>Sublime Text篇</h1><h3 id="1-Material"><a href="#1-Material" class="headerlink" title="1. Material"></a>1. Material</h3><p>准确来说这个是主题，目前我正在用的这款，作为Android Developer看到Material就被吸引过去了Σ( ° △ °|||)︴<br><img src="http://odck16ake.bkt.clouddn.com/web_api_code_0.png" alt=""></p>
<h3 id="2-AdvancedNewFile"><a href="#2-AdvancedNewFile" class="headerlink" title="2. AdvancedNewFile"></a>2. AdvancedNewFile</h3><p><code>command +Shift+N</code>快速创建新文件</p>
<h3 id="3-Emmet"><a href="#3-Emmet" class="headerlink" title="3. Emmet"></a>3. Emmet</h3><p>开发前端必备</p>
<h3 id="4-BracketHighlighter"><a href="#4-BracketHighlighter" class="headerlink" title="4. BracketHighlighter"></a>4. BracketHighlighter</h3><p>让括号、引号等配对符号高亮</p>
<h3 id="5-Babel"><a href="#5-Babel" class="headerlink" title="5. Babel"></a>5. Babel</h3><p>javascript(ES6)代码高亮</p>
<h3 id="6-SublimeLinter"><a href="#6-SublimeLinter" class="headerlink" title="6. SublimeLinter"></a>6. SublimeLinter</h3><p>javascript静态语法检测，出现错误会标红</p>
<h3 id="7-JavaScript-Completions和Java​Script-amp-Node​JS-Snippets"><a href="#7-JavaScript-Completions和Java​Script-amp-Node​JS-Snippets" class="headerlink" title="7. JavaScript Completions和Java​Script &amp; Node​JS Snippets"></a>7. JavaScript Completions和Java​Script &amp; Node​JS Snippets</h3><p>javascript代码补全</p>
<h3 id="8-All-Autocomplete"><a href="#8-All-Autocomplete" class="headerlink" title="8. All Autocomplete"></a>8. All Autocomplete</h3><p>记录打开过的文件的关键字用于补全</p>
<h3 id="9-SublimeCodeIntel"><a href="#9-SublimeCodeIntel" class="headerlink" title="9. SublimeCodeIntel"></a>9. SublimeCodeIntel</h3><p>项目内代码补全</p>
<h3 id="10-Terminal"><a href="#10-Terminal" class="headerlink" title="10. Terminal"></a>10. Terminal</h3><p><code>command+shift+T</code>在当前路径下打开终端</p>
<h3 id="11-JsFormat"><a href="#11-JsFormat" class="headerlink" title="11. JsFormat"></a>11. JsFormat</h3><p>javascript和json自动格式化排版</p>
<h3 id="12-react-native-snippets"><a href="#12-react-native-snippets" class="headerlink" title="12. react-native-snippets"></a>12. react-native-snippets</h3><p>添加react native代码片段</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合适的插件对提升工作效率尤为重要，&lt;del&gt;偶尔还可以装个X，&lt;/del&gt;大致整理了自己平时最常用的插件，主要是Chrome，Android Studio，Sublime Text的插件，长期更新~~&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="blog.codeest.moe/categories/Tools/"/>
    
    
      <category term="tool" scheme="blog.codeest.moe/tags/tool/"/>
    
      <category term="plugin" scheme="blog.codeest.moe/tags/plugin/"/>
    
      <category term="chrome" scheme="blog.codeest.moe/tags/chrome/"/>
    
      <category term="android studio" scheme="blog.codeest.moe/tags/android-studio/"/>
    
      <category term="sublime text" scheme="blog.codeest.moe/tags/sublime-text/"/>
    
  </entry>
  
  <entry>
    <title>将node.js编写的API部署到服务器</title>
    <link href="blog.codeest.moe/2016/09/24/web-api/"/>
    <id>blog.codeest.moe/2016/09/24/web-api/</id>
    <published>2016-09-24T15:35:55.000Z</published>
    <updated>2017-02-16T18:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h1 id="1-先确保在本地跑通项目"><a href="#1-先确保在本地跑通项目" class="headerlink" title="1.先确保在本地跑通项目"></a>1.先确保在本地跑通项目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line"></div><div class="line">node start</div></pre></td></tr></table></figure>
<p><img src="http://odck16ake.bkt.clouddn.com/web_api_1.png" alt=""></p>
<h1 id="2-服务器配置node-js环境"><a href="#2-服务器配置node-js环境" class="headerlink" title="2.服务器配置node.js环境"></a>2.服务器配置node.js环境</h1><p>1.登陆服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p [Port] root@[IP]</div></pre></td></tr></table></figure></p>
<p>2.更新yum<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y update</div></pre></td></tr></table></figure></p>
<p>3.安装一组编译源码的工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y groupinstall &quot;Development Tools&quot;</div></pre></td></tr></table></figure></p>
<p>4.进入用于存放源码的文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/src</div></pre></td></tr></table></figure></p>
<p>5.下载node.js源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://nodejs.org/dist/latest-v6.x/node-v6.6.0.tar.gz</div></pre></td></tr></table></figure></p>
<p>6.解压文件并进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar zxf node-v6.6.0.tar.gz</div><div class="line">cd node-v6.6.0</div></pre></td></tr></table></figure></p>
<p>7.执行脚本进行编译预处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure></p>
<p>8.编译源码并安装node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>PS:我在这里踩到一个坑，服务器上gcc编译器的版本太低，无法编译最新版的node.js源码，在升级了gcc版本后重新执行这个步骤重编了一遍</p>
<p>9.安装forever来保证项目进程持续存活<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -g install forever</div></pre></td></tr></table></figure></p>
<p>10.建立超级链接，不然调用指令时会出现”command not found”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /usr/local/bin/node /usr/bin/node</div><div class="line">sudo ln -s /usr/local/lib/node /usr/lib/node </div><div class="line">sudo ln -s /usr/local/bin/npm /usr/bin/npm </div><div class="line">sudo ln -s /usr/local/bin/node-waf /usr/bin/node-waf </div><div class="line">sudo ln -s /usr/local/bin/forever /usr/bin/forever</div></pre></td></tr></table></figure></p>
<h1 id="3-上传项目文件到服务器并执行"><a href="#3-上传项目文件到服务器并执行" class="headerlink" title="3.上传项目文件到服务器并执行"></a>3.上传项目文件到服务器并执行</h1><p>1.由于接口访问是http请求默认80端口，将代码中的端口监听<code>app.listen(3000);</code>改为<code>app.listen(80);</code></p>
<p>2.压缩工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zcvf [FileName.tar.gz] [DirName]</div></pre></td></tr></table></figure></p>
<p>3.上传文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -P [Port] [FileName.tar.gz] root@[IP]:[DirName]</div></pre></td></tr></table></figure></p>
<p>4.登陆服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p [Port] root@[IP]</div></pre></td></tr></table></figure></p>
<p>5.到达目标目录后解压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf [FileName.tar.gz]</div></pre></td></tr></table></figure></p>
<p>6.进入工程目录，使用forever启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forever start start.js</div></pre></td></tr></table></figure></p>
<p>7.检查运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forever start list</div></pre></td></tr></table></figure></p>
<p><img src="http://odck16ake.bkt.clouddn.com/web_api_4.png" alt=""><br>PS:这种是正常运行的状态，如果后面状态是STOPED的话说明运行失败，去项目目录下执行<code>node start</code>通过编译失败的信息来判断问题出在哪</p>
<p>8.需要关闭运行时使用如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forever stop 0</div></pre></td></tr></table></figure></p>
<p>我使用的域名是codeest.me，运行效果如下~<br><img src="http://odck16ake.bkt.clouddn.com/web_api_3.png" alt=""><br>好了收工~可以用App里的Retrofit框架来调戏这个API了(/ω＼)</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上篇文章，为了随时随地都能访问接口现在需要将它部署到服务器，到了这一步你目前应该已经有写好的node.js项目 x1，能够登陆的服务器 x1，最好还有域名 x1，为服务器地址添加域名解析这里就不讨论了，下面一步步来部署&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="blog.codeest.moe/categories/Web/"/>
    
    
      <category term="web" scheme="blog.codeest.moe/tags/web/"/>
    
      <category term="api" scheme="blog.codeest.moe/tags/api/"/>
    
      <category term="node.js" scheme="blog.codeest.moe/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用node.js + koa2搭建RESTful API</title>
    <link href="blog.codeest.moe/2016/09/21/web-api-code/"/>
    <id>blog.codeest.moe/2016/09/21/web-api-code/</id>
    <published>2016-09-21T12:25:50.000Z</published>
    <updated>2017-02-16T18:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p>
<h1 id="1-选择语言与框架"><a href="#1-选择语言与框架" class="headerlink" title="1.选择语言与框架"></a>1.选择语言与框架</h1><p></p><p>考虑了3款比较热门的后端语言，PHP，JavaScript（node.js），Python，打算从中选择一款，分别比较了它们的特点，最后选定了用node.js来开发，原因有3点：<br><br>1.js目前比较泛用，本身既能写Web前端，又能通过node.js来写后端，还能通过ReactNative来写移动端，真的是居家旅行必备2333<br>2.node.js搭建的服务端在性能上很出色<br>3.我本人也对Web开发很感兴趣QwQ</p><br>然后就是框架的选择了，node.js的web框架主流的选择有express和koa，koa算是express的进化版，技术还是新的好~ koa!就决定是你了╮(￣▽￣)╭<p></p>
<h1 id="2-编写node-js代码"><a href="#2-编写node-js代码" class="headerlink" title="2.编写node.js代码"></a>2.编写node.js代码</h1><p>这部分的内容还是比较多的，更推荐看专业的教程，推荐廖雪峰老师的JavaScript教程中的node.js部分，最后会手把手教你使用node.js构筑基于koa2的MVC架构的RESTful API项目，可以去下载demo扩展成满足自己项目需要的API<br></p>
<p><big><p><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000" target="_blank" rel="external">教程地址</a></p></big><br>我写的简易<a href="https://github.com/codeestX/my-restful-api" target="_blank" rel="external">RESTful API demo</a>如下<br><img src="http://odck16ake.bkt.clouddn.com/web_api_code_0.png" alt=""></p>
<h1 id="3-分析API类型"><a href="#3-分析API类型" class="headerlink" title="3.分析API类型"></a>3.分析API类型</h1><p>常见的API类型有GET、POST、DELETE、PUT，这几种类型的写法在廖老师的教程中都有涉及，其中GET通常又分为3种类型：</p>
<ul>
<li>返回Json</li>
<li>返回图片资源</li>
<li>返回用于下载的文件</li>
</ul>
<p>教程中没有划分这几种GET类型，我在自己的demo中分别实践了一遍</p>
<h3 id="3-1-返回Json"><a href="#3-1-返回Json" class="headerlink" title="3.1 返回Json"></a>3.1 返回Json</h3><p>这种类型最常用，直接返回可以转化为实体类的Json结构体<br>koa中type类型定义为<code>application/json</code> body直接传入一个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'GET /api/geeknews/version'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">        ctx.rest(&#123;</div><div class="line">        	<span class="attr">code</span>: version.getVersionCode(),</div><div class="line">        	<span class="attr">des</span>: version.getVersionDes()</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ctx.rest = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">                    ctx.response.type = <span class="string">'application/json'</span>;</div><div class="line">                    ctx.response.body = &#123;</div><div class="line">                        <span class="attr">code</span>: <span class="number">200</span>,</div><div class="line">                        <span class="attr">message</span>: <span class="string">''</span>,</div><div class="line">                        <span class="attr">data</span>: data</div><div class="line">                    &#125;;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p><img src="http://odck16ake.bkt.clouddn.com/web_api_1.png" alt=""></p>
<h3 id="3-2-返回图片资源"><a href="#3-2-返回图片资源" class="headerlink" title="3.2 返回图片资源"></a>3.2 返回图片资源</h3><p>这种类型在Android端多用于Glide、Picasso等框架加载图片<br>koa中type类型定义为<code>.jpg</code>（也可以是其他图片类型） body传入读取到的文件流<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'GET /img/test.jpg'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">        ctx.rest(</div><div class="line">            fs.createReadStream(imgPath)</div><div class="line">        );</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.rest = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">                    ctx.response.type = <span class="string">'.jpg'</span>;</div><div class="line">                    ctx.response.body = data;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p><img src="http://odck16ake.bkt.clouddn.com/web_api_code_1.png" alt=""></p>
<h3 id="3-3-返回用于下载的文件"><a href="#3-3-返回用于下载的文件" class="headerlink" title="3.3 返回用于下载的文件"></a>3.3 返回用于下载的文件</h3><p>这种类型在Android端多用于更新apk包，下载配置文件等<br>koa中type类型定义为<code>application/octet-stream</code> body传入读取到的文件流<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'GET /apk/geeknews.apk'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</div><div class="line">        ctx.rest(</div><div class="line">            fs.createReadStream(filePath)</div><div class="line">        );</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.rest = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">                    ctx.response.type = <span class="string">'application/octet-stream'</span>;</div><div class="line">                    ctx.response.body = data;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p><img src="http://odck16ake.bkt.clouddn.com/web_api_code_2.png" alt=""><br><img src="http://odck16ake.bkt.clouddn.com/web_api_code_3.png" alt=""></p>
<p>这篇文章主要的目的在于让大家少走弯路，具体代码还是需要去参考上面列出的教程和demo，掌握了之后自己写一些简单的RESTful API还是很轻松的(´・ω・`)</p>
<blockquote><p>声明：本站所有文章均为原创或翻译，遵循<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>，如需转载请确保您对该协议有足够了解，并附上作者名(Est)及原贴地址</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为移动开发者，平时都是用服务端提供的API来做开发，但自己一直都对API的实现比较感兴趣(｡・`ω´･) 正好最近写了一款App，在做版本更新检测功能的时候打算不借助第三方SDK，用自己实现的RESTful API来完成这个功能&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="blog.codeest.moe/categories/Web/"/>
    
    
      <category term="web" scheme="blog.codeest.moe/tags/web/"/>
    
      <category term="api" scheme="blog.codeest.moe/tags/api/"/>
    
      <category term="node.js" scheme="blog.codeest.moe/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hello, Blog</title>
    <link href="blog.codeest.moe/2016/09/11/post0/"/>
    <id>blog.codeest.moe/2016/09/11/post0/</id>
    <published>2016-09-11T09:06:44.000Z</published>
    <updated>2016-09-13T16:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客开张啦╮(￣▽￣)╭</p>
<p>由 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 强力驱动  主题 - <a href="https://github.com/kaedea/hexo-theme-themia" target="_blank" rel="external">Themia</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客开张啦╮(￣▽￣)╭&lt;/p&gt;
&lt;p&gt;由 &lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt; 强力驱动  主题 - &lt;a href=&quot;https://github.com/kaedea/hexo-theme-themia&quot;&gt;Themia&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
